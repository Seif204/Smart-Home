
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000394e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000394e  000039e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  00800178  00800178  00003afa  2**0
                  ALLOC
  3 .stab         000037d4  00000000  00000000  00003afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121f  00000000  00000000  000072d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000084ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000868f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008881  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ac8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c012  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d69e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e00c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3e       	cpi	r26, 0xE8	; 232
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <main>
      8a:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <initTimer0>:
#include <avr/io.h>
#include "../../LIB/BIT_Math.h"
#include "../../LIB/Def_Types.h"
u32 overflowNum = 0, initialVal = 0;
//set prescalar
void initTimer0(void) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	//Set Mode Normal /
	ClearBit(TCCR0, 3);
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	87 7f       	andi	r24, 0xF7	; 247
     e42:	8c 93       	st	X, r24
	ClearBit(TCCR0, 6);
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7b       	andi	r24, 0xBF	; 191
     e50:	8c 93       	st	X, r24
	//GIE
	SetBit(SREG, 7);
     e52:	af e5       	ldi	r26, 0x5F	; 95
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e5       	ldi	r30, 0x5F	; 95
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 68       	ori	r24, 0x80	; 128
     e5e:	8c 93       	st	X, r24
	//PIE
	SetBit(TIMSK, 0);
     e60:	a9 e5       	ldi	r26, 0x59	; 89
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e9 e5       	ldi	r30, 0x59	; 89
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	8c 93       	st	X, r24
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <Timer0_Start>:
void Timer0_Start(void) {
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	//Select Timer Freq with Prescalar
	//
	SetBit(TCCR0, 0);
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	81 60       	ori	r24, 0x01	; 1
     e88:	8c 93       	st	X, r24
	ClearBit(TCCR0, 1);
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8d 7f       	andi	r24, 0xFD	; 253
     e96:	8c 93       	st	X, r24
	SetBit(TCCR0, 2);
     e98:	a3 e5       	ldi	r26, 0x53	; 83
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e3 e5       	ldi	r30, 0x53	; 83
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	84 60       	ori	r24, 0x04	; 4
     ea4:	8c 93       	st	X, r24

}
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <Timer0_Stop>:
void Timer0_Stop(void) {
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
	//Set Timer Freq to 0
	ClearBit(TCCR0, 0);
     eb4:	a3 e5       	ldi	r26, 0x53	; 83
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e3 e5       	ldi	r30, 0x53	; 83
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8e 7f       	andi	r24, 0xFE	; 254
     ec0:	8c 93       	st	X, r24
	ClearBit(TCCR0, 1);
     ec2:	a3 e5       	ldi	r26, 0x53	; 83
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e3 e5       	ldi	r30, 0x53	; 83
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8d 7f       	andi	r24, 0xFD	; 253
     ece:	8c 93       	st	X, r24
	ClearBit(TCCR0, 2);
     ed0:	a3 e5       	ldi	r26, 0x53	; 83
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e3 e5       	ldi	r30, 0x53	; 83
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8b 7f       	andi	r24, 0xFB	; 251
     edc:	8c 93       	st	X, r24
}
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <Timer0_wait_ms>:
void Timer0_wait_ms(u32 desiredTime) {
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	2c 97       	sbiw	r28, 0x0c	; 12
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	69 87       	std	Y+9, r22	; 0x09
     efa:	7a 87       	std	Y+10, r23	; 0x0a
     efc:	8b 87       	std	Y+11, r24	; 0x0b
     efe:	9c 87       	std	Y+12, r25	; 0x0c
	//Calac Number of OverFlow Interrupts & Preload
	//Time in Micro Sec ;
	u32 tik_time = 1024 / 8;
     f00:	80 e8       	ldi	r24, 0x80	; 128
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	8d 83       	std	Y+5, r24	; 0x05
     f0a:	9e 83       	std	Y+6, r25	; 0x06
     f0c:	af 83       	std	Y+7, r26	; 0x07
     f0e:	b8 87       	std	Y+8, r27	; 0x08
	u32 desiredTiks = (desiredTime * 1000) / tik_time;
     f10:	89 85       	ldd	r24, Y+9	; 0x09
     f12:	9a 85       	ldd	r25, Y+10	; 0x0a
     f14:	ab 85       	ldd	r26, Y+11	; 0x0b
     f16:	bc 85       	ldd	r27, Y+12	; 0x0c
     f18:	28 ee       	ldi	r18, 0xE8	; 232
     f1a:	33 e0       	ldi	r19, 0x03	; 3
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	0e 94 0d 1c 	call	0x381a	; 0x381a <__mulsi3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	2d 81       	ldd	r18, Y+5	; 0x05
     f2e:	3e 81       	ldd	r19, Y+6	; 0x06
     f30:	4f 81       	ldd	r20, Y+7	; 0x07
     f32:	58 85       	ldd	r21, Y+8	; 0x08
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__udivmodsi4>
     f3c:	da 01       	movw	r26, r20
     f3e:	c9 01       	movw	r24, r18
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	9a 83       	std	Y+2, r25	; 0x02
     f44:	ab 83       	std	Y+3, r26	; 0x03
     f46:	bc 83       	std	Y+4, r27	; 0x04
	overflowNum = (desiredTiks / 256);
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	ab 81       	ldd	r26, Y+3	; 0x03
     f4e:	bc 81       	ldd	r27, Y+4	; 0x04
     f50:	89 2f       	mov	r24, r25
     f52:	9a 2f       	mov	r25, r26
     f54:	ab 2f       	mov	r26, r27
     f56:	bb 27       	eor	r27, r27
     f58:	80 93 78 01 	sts	0x0178, r24
     f5c:	90 93 79 01 	sts	0x0179, r25
     f60:	a0 93 7a 01 	sts	0x017A, r26
     f64:	b0 93 7b 01 	sts	0x017B, r27
	initialVal = 256 - (desiredTiks % 256);
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	ab 81       	ldd	r26, Y+3	; 0x03
     f6e:	bc 81       	ldd	r27, Y+4	; 0x04
     f70:	9c 01       	movw	r18, r24
     f72:	ad 01       	movw	r20, r26
     f74:	30 70       	andi	r19, 0x00	; 0
     f76:	40 70       	andi	r20, 0x00	; 0
     f78:	50 70       	andi	r21, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	a0 e0       	ldi	r26, 0x00	; 0
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	82 1b       	sub	r24, r18
     f84:	93 0b       	sbc	r25, r19
     f86:	a4 0b       	sbc	r26, r20
     f88:	b5 0b       	sbc	r27, r21
     f8a:	80 93 7c 01 	sts	0x017C, r24
     f8e:	90 93 7d 01 	sts	0x017D, r25
     f92:	a0 93 7e 01 	sts	0x017E, r26
     f96:	b0 93 7f 01 	sts	0x017F, r27
	TCNT0 = initialVal;
     f9a:	e2 e5       	ldi	r30, 0x52	; 82
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 91 7c 01 	lds	r24, 0x017C
     fa2:	90 91 7d 01 	lds	r25, 0x017D
     fa6:	a0 91 7e 01 	lds	r26, 0x017E
     faa:	b0 91 7f 01 	lds	r27, 0x017F
     fae:	80 83       	st	Z, r24
	overflowNum++;
     fb0:	80 91 78 01 	lds	r24, 0x0178
     fb4:	90 91 79 01 	lds	r25, 0x0179
     fb8:	a0 91 7a 01 	lds	r26, 0x017A
     fbc:	b0 91 7b 01 	lds	r27, 0x017B
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	a1 1d       	adc	r26, r1
     fc4:	b1 1d       	adc	r27, r1
     fc6:	80 93 78 01 	sts	0x0178, r24
     fca:	90 93 79 01 	sts	0x0179, r25
     fce:	a0 93 7a 01 	sts	0x017A, r26
     fd2:	b0 93 7b 01 	sts	0x017B, r27
}
     fd6:	2c 96       	adiw	r28, 0x0c	; 12
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <initTimer1>:

void initTimer1(void) {
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	//Set CTC mode
	SetBit(TCCR1B, 3);
     ff0:	ae e4       	ldi	r26, 0x4E	; 78
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee e4       	ldi	r30, 0x4E	; 78
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 60       	ori	r24, 0x08	; 8
     ffc:	8c 93       	st	X, r24
	//GIE
	SetBit(SREG, 7);
     ffe:	af e5       	ldi	r26, 0x5F	; 95
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ef e5       	ldi	r30, 0x5F	; 95
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	80 68       	ori	r24, 0x80	; 128
    100a:	8c 93       	st	X, r24
	//PIE
	SetBit(TIMSK, 4);
    100c:	a9 e5       	ldi	r26, 0x59	; 89
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e9 e5       	ldi	r30, 0x59	; 89
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	80 61       	ori	r24, 0x10	; 16
    1018:	8c 93       	st	X, r24
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <Timer1_Start>:
void Timer1_Start(void) {
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	SetBit(TCCR1B, 0);
    1028:	ae e4       	ldi	r26, 0x4E	; 78
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ee e4       	ldi	r30, 0x4E	; 78
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	81 60       	ori	r24, 0x01	; 1
    1034:	8c 93       	st	X, r24
	ClearBit(TCCR1B, 1);
    1036:	ae e4       	ldi	r26, 0x4E	; 78
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	ee e4       	ldi	r30, 0x4E	; 78
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8d 7f       	andi	r24, 0xFD	; 253
    1042:	8c 93       	st	X, r24
	SetBit(TCCR1B, 2);
    1044:	ae e4       	ldi	r26, 0x4E	; 78
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	ee e4       	ldi	r30, 0x4E	; 78
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	84 60       	ori	r24, 0x04	; 4
    1050:	8c 93       	st	X, r24

}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <Timer1_Stop>:
void Timer1_Stop(void) {
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	ClearBit(TCCR1B, 0);
    1060:	ae e4       	ldi	r26, 0x4E	; 78
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ee e4       	ldi	r30, 0x4E	; 78
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8e 7f       	andi	r24, 0xFE	; 254
    106c:	8c 93       	st	X, r24
	ClearBit(TCCR1B, 1);
    106e:	ae e4       	ldi	r26, 0x4E	; 78
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ee e4       	ldi	r30, 0x4E	; 78
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8d 7f       	andi	r24, 0xFD	; 253
    107a:	8c 93       	st	X, r24
	ClearBit(TCCR1B, 2);
    107c:	ae e4       	ldi	r26, 0x4E	; 78
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	ee e4       	ldi	r30, 0x4E	; 78
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	8b 7f       	andi	r24, 0xFB	; 251
    1088:	8c 93       	st	X, r24
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <Timer1_wait_ms>:
void Timer1_wait_ms(u32 desiredTime) {
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	2c 97       	sbiw	r28, 0x0c	; 12
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	69 87       	std	Y+9, r22	; 0x09
    10a6:	7a 87       	std	Y+10, r23	; 0x0a
    10a8:	8b 87       	std	Y+11, r24	; 0x0b
    10aa:	9c 87       	std	Y+12, r25	; 0x0c

	if (desiredTime <= 8400) {
    10ac:	89 85       	ldd	r24, Y+9	; 0x09
    10ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b0:	ab 85       	ldd	r26, Y+11	; 0x0b
    10b2:	bc 85       	ldd	r27, Y+12	; 0x0c
    10b4:	81 3d       	cpi	r24, 0xD1	; 209
    10b6:	20 e2       	ldi	r18, 0x20	; 32
    10b8:	92 07       	cpc	r25, r18
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	a2 07       	cpc	r26, r18
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	b2 07       	cpc	r27, r18
    10c2:	58 f5       	brcc	.+86     	; 0x111a <Timer1_wait_ms+0x8a>
		u32 tik_time = 1024 / 8;
    10c4:	80 e8       	ldi	r24, 0x80	; 128
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	8d 83       	std	Y+5, r24	; 0x05
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	af 83       	std	Y+7, r26	; 0x07
    10d2:	b8 87       	std	Y+8, r27	; 0x08
		u32 desiredTiks = (desiredTime * 1000) / tik_time;
    10d4:	89 85       	ldd	r24, Y+9	; 0x09
    10d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    10da:	bc 85       	ldd	r27, Y+12	; 0x0c
    10dc:	28 ee       	ldi	r18, 0xE8	; 232
    10de:	33 e0       	ldi	r19, 0x03	; 3
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	0e 94 0d 1c 	call	0x381a	; 0x381a <__mulsi3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	2d 81       	ldd	r18, Y+5	; 0x05
    10f2:	3e 81       	ldd	r19, Y+6	; 0x06
    10f4:	4f 81       	ldd	r20, Y+7	; 0x07
    10f6:	58 85       	ldd	r21, Y+8	; 0x08
    10f8:	bc 01       	movw	r22, r24
    10fa:	cd 01       	movw	r24, r26
    10fc:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__udivmodsi4>
    1100:	da 01       	movw	r26, r20
    1102:	c9 01       	movw	r24, r18
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	ab 83       	std	Y+3, r26	; 0x03
    110a:	bc 83       	std	Y+4, r27	; 0x04
		OCR1A = desiredTiks - 1;
    110c:	ea e4       	ldi	r30, 0x4A	; 74
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	80 83       	st	Z, r24
	}
}
    111a:	2c 96       	adiw	r28, 0x0c	; 12
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <init_SPI_Master>:
#include <avr/io.h>
#include "../../LIB/BIT_Math.h"
#include "../../LIB/Def_Types.h"
#include "../../MCAL/DIO/int.h"
#include "int.h"
void init_SPI_Master() {
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62

	SetPinDir(DIO_PORTB, PIN_6, PIN_IN); //Set MISO dir
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	66 e0       	ldi	r22, 0x06	; 6
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>

	SetPinDir(DIO_PORTB, PIN_5, PIN_OUT); //Set MOSI dir
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	65 e0       	ldi	r22, 0x05	; 5
    1142:	41 e0       	ldi	r20, 0x01	; 1
    1144:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>

	SetPinDir(DIO_PORTB, PIN_7, PIN_OUT); //Set SCK dir
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	67 e0       	ldi	r22, 0x07	; 7
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>

	SetPinDir(DIO_PORTB, PIN_4, PIN_OUT); //Set Slave Select dir
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	64 e0       	ldi	r22, 0x04	; 4
    1156:	41 e0       	ldi	r20, 0x01	; 1
    1158:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>

	SetPinVal(DIO_PORTB, PIN_4, PIN_HIGH); //Set Slave to High
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	64 e0       	ldi	r22, 0x04	; 4
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	//Set to Master
	SetBit(SPCR, 4);
    1166:	ad e2       	ldi	r26, 0x2D	; 45
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	ed e2       	ldi	r30, 0x2D	; 45
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 61       	ori	r24, 0x10	; 16
    1172:	8c 93       	st	X, r24
	//Set CLK
	SetBit(SPCR, 0);
    1174:	ad e2       	ldi	r26, 0x2D	; 45
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	ed e2       	ldi	r30, 0x2D	; 45
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	81 60       	ori	r24, 0x01	; 1
    1180:	8c 93       	st	X, r24
	SetBit(SPCR, 1);
    1182:	ad e2       	ldi	r26, 0x2D	; 45
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	ed e2       	ldi	r30, 0x2D	; 45
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	82 60       	ori	r24, 0x02	; 2
    118e:	8c 93       	st	X, r24
	//Enable SPI
	SetBit(SPCR, 6);
    1190:	ad e2       	ldi	r26, 0x2D	; 45
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	ed e2       	ldi	r30, 0x2D	; 45
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	80 64       	ori	r24, 0x40	; 64
    119c:	8c 93       	st	X, r24


}
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <init_SPI_Slave>:

void init_SPI_Slave() {
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	SetPinDir(DIO_PORTB, PIN_6, PIN_OUT); //Set MISO dir
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	66 e0       	ldi	r22, 0x06	; 6
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>

	SetPinDir(DIO_PORTB, PIN_5, PIN_IN); //Set MOSI dir
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	65 e0       	ldi	r22, 0x05	; 5
    11ba:	40 e0       	ldi	r20, 0x00	; 0
    11bc:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>

	SetPinDir(DIO_PORTB, PIN_7, PIN_IN); //Set SCK dir
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	67 e0       	ldi	r22, 0x07	; 7
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>

	SetPinDir(DIO_PORTB, PIN_4, PIN_IN); //Set Slave Select dir
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	64 e0       	ldi	r22, 0x04	; 4
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	//Set to Slave
	ClearBit(SPCR, 4);
    11d4:	ad e2       	ldi	r26, 0x2D	; 45
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ed e2       	ldi	r30, 0x2D	; 45
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8f 7e       	andi	r24, 0xEF	; 239
    11e0:	8c 93       	st	X, r24
	//Enable SPI
	SetBit(SPCR, 6);
    11e2:	ad e2       	ldi	r26, 0x2D	; 45
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ed e2       	ldi	r30, 0x2D	; 45
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	80 64       	ori	r24, 0x40	; 64
    11ee:	8c 93       	st	X, r24
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <SPI_Start_Trans>:
void SPI_Start_Trans() {
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	SetPinVal(DIO_PORTB, PIN_4, PIN_LOW);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	64 e0       	ldi	r22, 0x04	; 4
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
}
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <SPI_Stop_Trans>:
void SPI_Stop_Trans() {
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
	SetPinVal(DIO_PORTB, PIN_4, PIN_LOW);
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	64 e0       	ldi	r22, 0x04	; 4
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
}
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <SPI_Transceive>:
u8 SPI_Transceive(u8 data) {
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	0f 92       	push	r0
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    1232:	ef e2       	ldi	r30, 0x2F	; 47
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	80 83       	st	Z, r24
	while (GetBit(SPSR, 7) == 0)
    123a:	ee e2       	ldi	r30, 0x2E	; 46
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	88 23       	and	r24, r24
    1242:	dc f7       	brge	.-10     	; 0x123a <SPI_Transceive+0x14>
		;
	return SPDR;
    1244:	ef e2       	ldi	r30, 0x2F	; 47
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z

}
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <EXTI0>:
 */

#include <avr/interrupt.h>
#include "../../LIB/BIT_Math.h"
#include "../../LIB/Def_Types.h"
void EXTI0(void) {
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
	//GIE
	SetBit(SREG, 7);
    125a:	af e5       	ldi	r26, 0x5F	; 95
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	ef e5       	ldi	r30, 0x5F	; 95
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 68       	ori	r24, 0x80	; 128
    1266:	8c 93       	st	X, r24
	//Falling Edge
	ClearBit(MCUCR, 0);
    1268:	a5 e5       	ldi	r26, 0x55	; 85
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e5       	ldi	r30, 0x55	; 85
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8e 7f       	andi	r24, 0xFE	; 254
    1274:	8c 93       	st	X, r24
	SetBit(MCUCR, 1);
    1276:	a5 e5       	ldi	r26, 0x55	; 85
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e5       	ldi	r30, 0x55	; 85
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	82 60       	ori	r24, 0x02	; 2
    1282:	8c 93       	st	X, r24
	SetBit(GICR, 6);
    1284:	ab e5       	ldi	r26, 0x5B	; 91
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	eb e5       	ldi	r30, 0x5B	; 91
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	80 64       	ori	r24, 0x40	; 64
    1290:	8c 93       	st	X, r24

}
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <EXTI1>:
void EXTI1(void) {
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	//GIE
	SetBit(SREG, 7);
    12a0:	af e5       	ldi	r26, 0x5F	; 95
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ef e5       	ldi	r30, 0x5F	; 95
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	80 68       	ori	r24, 0x80	; 128
    12ac:	8c 93       	st	X, r24
	//Falling Edge
	ClearBit(MCUCR, 2);
    12ae:	a5 e5       	ldi	r26, 0x55	; 85
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e5 e5       	ldi	r30, 0x55	; 85
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8b 7f       	andi	r24, 0xFB	; 251
    12ba:	8c 93       	st	X, r24
	SetBit(MCUCR, 3);
    12bc:	a5 e5       	ldi	r26, 0x55	; 85
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e5 e5       	ldi	r30, 0x55	; 85
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	88 60       	ori	r24, 0x08	; 8
    12c8:	8c 93       	st	X, r24
	SetBit(GICR, 7);
    12ca:	ab e5       	ldi	r26, 0x5B	; 91
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	eb e5       	ldi	r30, 0x5B	; 91
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	80 68       	ori	r24, 0x80	; 128
    12d6:	8c 93       	st	X, r24
}
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <EXTI2>:
void EXTI2(void) {
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
	//GIE
	SetBit(SREG, 7);
    12e6:	af e5       	ldi	r26, 0x5F	; 95
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	ef e5       	ldi	r30, 0x5F	; 95
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 68       	ori	r24, 0x80	; 128
    12f2:	8c 93       	st	X, r24
	//Falling Edge
	ClearBit(MCUCSR, 6);
    12f4:	a4 e5       	ldi	r26, 0x54	; 84
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e4 e5       	ldi	r30, 0x54	; 84
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	8f 7b       	andi	r24, 0xBF	; 191
    1300:	8c 93       	st	X, r24
	SetBit(MCUCSR, 7);
    1302:	a4 e5       	ldi	r26, 0x54	; 84
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e4 e5       	ldi	r30, 0x54	; 84
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 68       	ori	r24, 0x80	; 128
    130e:	8c 93       	st	X, r24
	// PIE

	SetBit(GICR, 5);
    1310:	ab e5       	ldi	r26, 0x5B	; 91
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	eb e5       	ldi	r30, 0x5B	; 91
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	80 62       	ori	r24, 0x20	; 32
    131c:	8c 93       	st	X, r24

}
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <SetPortDir>:
 */
#include <avr/io.h>
#include "int.h"
#include "../../LIB/BIT_Math.h"

void SetPortDir(u8 port, u8 dir) {
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <SetPortDir+0x6>
    132a:	00 d0       	rcall	.+0      	; 0x132c <SetPortDir+0x8>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	6a 83       	std	Y+2, r22	; 0x02
	switch (port) {
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3c 83       	std	Y+4, r19	; 0x04
    133c:	2b 83       	std	Y+3, r18	; 0x03
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	91 05       	cpc	r25, r1
    1346:	d1 f0       	breq	.+52     	; 0x137c <SetPortDir+0x58>
    1348:	2b 81       	ldd	r18, Y+3	; 0x03
    134a:	3c 81       	ldd	r19, Y+4	; 0x04
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	2c f4       	brge	.+10     	; 0x135c <SetPortDir+0x38>
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	61 f0       	breq	.+24     	; 0x1372 <SetPortDir+0x4e>
    135a:	1e c0       	rjmp	.+60     	; 0x1398 <SetPortDir+0x74>
    135c:	2b 81       	ldd	r18, Y+3	; 0x03
    135e:	3c 81       	ldd	r19, Y+4	; 0x04
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	81 f0       	breq	.+32     	; 0x1386 <SetPortDir+0x62>
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	91 05       	cpc	r25, r1
    136e:	81 f0       	breq	.+32     	; 0x1390 <SetPortDir+0x6c>
    1370:	13 c0       	rjmp	.+38     	; 0x1398 <SetPortDir+0x74>
	case DIO_PORTA:
		DDRA = dir;
    1372:	ea e3       	ldi	r30, 0x3A	; 58
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	80 83       	st	Z, r24
    137a:	0e c0       	rjmp	.+28     	; 0x1398 <SetPortDir+0x74>
		break;
	case DIO_PORTB:
		DDRB = dir;
    137c:	e7 e3       	ldi	r30, 0x37	; 55
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	80 83       	st	Z, r24
    1384:	09 c0       	rjmp	.+18     	; 0x1398 <SetPortDir+0x74>
		break;
	case DIO_PORTC:
		DDRC = dir;
    1386:	e4 e3       	ldi	r30, 0x34	; 52
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	80 83       	st	Z, r24
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <SetPortDir+0x74>
		break;
	case DIO_PORTD:
		DDRD = dir;
    1390:	e1 e3       	ldi	r30, 0x31	; 49
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	80 83       	st	Z, r24
		break;
	}
}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <SetPortVal>:
void SetPortVal(u8 port, u8 val) {
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <SetPortVal+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <SetPortVal+0x8>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	6a 83       	std	Y+2, r22	; 0x02
	switch (port) {
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	3c 83       	std	Y+4, r19	; 0x04
    13be:	2b 83       	std	Y+3, r18	; 0x03
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	91 05       	cpc	r25, r1
    13c8:	d1 f0       	breq	.+52     	; 0x13fe <SetPortVal+0x58>
    13ca:	2b 81       	ldd	r18, Y+3	; 0x03
    13cc:	3c 81       	ldd	r19, Y+4	; 0x04
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	2c f4       	brge	.+10     	; 0x13de <SetPortVal+0x38>
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	61 f0       	breq	.+24     	; 0x13f4 <SetPortVal+0x4e>
    13dc:	1e c0       	rjmp	.+60     	; 0x141a <SetPortVal+0x74>
    13de:	2b 81       	ldd	r18, Y+3	; 0x03
    13e0:	3c 81       	ldd	r19, Y+4	; 0x04
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	81 f0       	breq	.+32     	; 0x1408 <SetPortVal+0x62>
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	91 05       	cpc	r25, r1
    13f0:	81 f0       	breq	.+32     	; 0x1412 <SetPortVal+0x6c>
    13f2:	13 c0       	rjmp	.+38     	; 0x141a <SetPortVal+0x74>
	case DIO_PORTA:
		PORTA = val;
    13f4:	eb e3       	ldi	r30, 0x3B	; 59
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	80 83       	st	Z, r24
    13fc:	0e c0       	rjmp	.+28     	; 0x141a <SetPortVal+0x74>
		break;
	case DIO_PORTB:
		PORTB = val;
    13fe:	e8 e3       	ldi	r30, 0x38	; 56
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	80 83       	st	Z, r24
    1406:	09 c0       	rjmp	.+18     	; 0x141a <SetPortVal+0x74>
		break;
	case DIO_PORTC:
		PORTC = val;
    1408:	e5 e3       	ldi	r30, 0x35	; 53
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	80 83       	st	Z, r24
    1410:	04 c0       	rjmp	.+8      	; 0x141a <SetPortVal+0x74>
		break;
	case DIO_PORTD:
		PORTD = val;
    1412:	e2 e3       	ldi	r30, 0x32	; 50
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	80 83       	st	Z, r24
		break;

	}
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <SetPinDir>:
void SetPinDir(u8 port, u8 pin, u8 dir) {
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	29 97       	sbiw	r28, 0x09	; 9
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	6a 83       	std	Y+2, r22	; 0x02
    1440:	4b 83       	std	Y+3, r20	; 0x03
	switch (dir) {
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	39 87       	std	Y+9, r19	; 0x09
    144a:	28 87       	std	Y+8, r18	; 0x08
    144c:	88 85       	ldd	r24, Y+8	; 0x08
    144e:	99 85       	ldd	r25, Y+9	; 0x09
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	39 f0       	breq	.+14     	; 0x1462 <SetPinDir+0x3a>
    1454:	28 85       	ldd	r18, Y+8	; 0x08
    1456:	39 85       	ldd	r19, Y+9	; 0x09
    1458:	21 30       	cpi	r18, 0x01	; 1
    145a:	31 05       	cpc	r19, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <SetPinDir+0x38>
    145e:	75 c0       	rjmp	.+234    	; 0x154a <SetPinDir+0x122>
    1460:	e2 c0       	rjmp	.+452    	; 0x1626 <SetPinDir+0x1fe>
	case PIN_IN:
		switch (port) {
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3f 83       	std	Y+7, r19	; 0x07
    146a:	2e 83       	std	Y+6, r18	; 0x06
    146c:	8e 81       	ldd	r24, Y+6	; 0x06
    146e:	9f 81       	ldd	r25, Y+7	; 0x07
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	91 05       	cpc	r25, r1
    1474:	59 f1       	breq	.+86     	; 0x14cc <SetPinDir+0xa4>
    1476:	2e 81       	ldd	r18, Y+6	; 0x06
    1478:	3f 81       	ldd	r19, Y+7	; 0x07
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	2c f4       	brge	.+10     	; 0x148a <SetPinDir+0x62>
    1480:	8e 81       	ldd	r24, Y+6	; 0x06
    1482:	9f 81       	ldd	r25, Y+7	; 0x07
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	69 f0       	breq	.+26     	; 0x14a2 <SetPinDir+0x7a>
    1488:	ce c0       	rjmp	.+412    	; 0x1626 <SetPinDir+0x1fe>
    148a:	2e 81       	ldd	r18, Y+6	; 0x06
    148c:	3f 81       	ldd	r19, Y+7	; 0x07
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	89 f1       	breq	.+98     	; 0x14f6 <SetPinDir+0xce>
    1494:	8e 81       	ldd	r24, Y+6	; 0x06
    1496:	9f 81       	ldd	r25, Y+7	; 0x07
    1498:	83 30       	cpi	r24, 0x03	; 3
    149a:	91 05       	cpc	r25, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <SetPinDir+0x78>
    149e:	40 c0       	rjmp	.+128    	; 0x1520 <SetPinDir+0xf8>
    14a0:	c2 c0       	rjmp	.+388    	; 0x1626 <SetPinDir+0x1fe>
		case DIO_PORTA:
			ClearBit(DDRA, pin);
    14a2:	aa e3       	ldi	r26, 0x3A	; 58
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ea e3       	ldi	r30, 0x3A	; 58
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <SetPinDir+0x98>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <SetPinDir+0x94>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	ad c0       	rjmp	.+346    	; 0x1626 <SetPinDir+0x1fe>
			break;
		case DIO_PORTB:
			ClearBit(DDRB, pin);
    14cc:	a7 e3       	ldi	r26, 0x37	; 55
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e7 e3       	ldi	r30, 0x37	; 55
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <SetPinDir+0xc2>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <SetPinDir+0xbe>
    14ee:	80 95       	com	r24
    14f0:	84 23       	and	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	98 c0       	rjmp	.+304    	; 0x1626 <SetPinDir+0x1fe>
			break;
		case DIO_PORTC:
			ClearBit(DDRC, pin);
    14f6:	a4 e3       	ldi	r26, 0x34	; 52
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e4 e3       	ldi	r30, 0x34	; 52
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <SetPinDir+0xec>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <SetPinDir+0xe8>
    1518:	80 95       	com	r24
    151a:	84 23       	and	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	83 c0       	rjmp	.+262    	; 0x1626 <SetPinDir+0x1fe>
			break;
		case DIO_PORTD:
			ClearBit(DDRD, pin);
    1520:	a1 e3       	ldi	r26, 0x31	; 49
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e1 e3       	ldi	r30, 0x31	; 49
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <SetPinDir+0x116>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <SetPinDir+0x112>
    1542:	80 95       	com	r24
    1544:	84 23       	and	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	6e c0       	rjmp	.+220    	; 0x1626 <SetPinDir+0x1fe>
			break;

		}
		break;
	case PIN_OUT:
		switch (port) {
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3d 83       	std	Y+5, r19	; 0x05
    1552:	2c 83       	std	Y+4, r18	; 0x04
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	49 f1       	breq	.+82     	; 0x15b0 <SetPinDir+0x188>
    155e:	2c 81       	ldd	r18, Y+4	; 0x04
    1560:	3d 81       	ldd	r19, Y+5	; 0x05
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	2c f4       	brge	.+10     	; 0x1572 <SetPinDir+0x14a>
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	61 f0       	breq	.+24     	; 0x1588 <SetPinDir+0x160>
    1570:	5a c0       	rjmp	.+180    	; 0x1626 <SetPinDir+0x1fe>
    1572:	2c 81       	ldd	r18, Y+4	; 0x04
    1574:	3d 81       	ldd	r19, Y+5	; 0x05
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	71 f1       	breq	.+92     	; 0x15d8 <SetPinDir+0x1b0>
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
    157e:	9d 81       	ldd	r25, Y+5	; 0x05
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	91 05       	cpc	r25, r1
    1584:	e9 f1       	breq	.+122    	; 0x1600 <SetPinDir+0x1d8>
    1586:	4f c0       	rjmp	.+158    	; 0x1626 <SetPinDir+0x1fe>
		case DIO_PORTA:
			SetBit(DDRA, pin);
    1588:	aa e3       	ldi	r26, 0x3A	; 58
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ea e3       	ldi	r30, 0x3A	; 58
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <SetPinDir+0x17e>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <SetPinDir+0x17a>
    15aa:	84 2b       	or	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	3b c0       	rjmp	.+118    	; 0x1626 <SetPinDir+0x1fe>
			break;
		case DIO_PORTB:
			SetBit(DDRB, pin);
    15b0:	a7 e3       	ldi	r26, 0x37	; 55
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e7 e3       	ldi	r30, 0x37	; 55
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <SetPinDir+0x1a6>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <SetPinDir+0x1a2>
    15d2:	84 2b       	or	r24, r20
    15d4:	8c 93       	st	X, r24
    15d6:	27 c0       	rjmp	.+78     	; 0x1626 <SetPinDir+0x1fe>
			break;
		case DIO_PORTC:
			SetBit(DDRC, pin);
    15d8:	a4 e3       	ldi	r26, 0x34	; 52
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e4 e3       	ldi	r30, 0x34	; 52
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <SetPinDir+0x1ce>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <SetPinDir+0x1ca>
    15fa:	84 2b       	or	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	13 c0       	rjmp	.+38     	; 0x1626 <SetPinDir+0x1fe>
			break;
		case DIO_PORTD:
			SetBit(DDRD, pin);
    1600:	a1 e3       	ldi	r26, 0x31	; 49
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e1 e3       	ldi	r30, 0x31	; 49
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <SetPinDir+0x1f6>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <SetPinDir+0x1f2>
    1622:	84 2b       	or	r24, r20
    1624:	8c 93       	st	X, r24

		}
		break;

	}
}
    1626:	29 96       	adiw	r28, 0x09	; 9
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <SetPinVal>:
void SetPinVal(u8 port, u8 pin, u8 val) {
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	29 97       	sbiw	r28, 0x09	; 9
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	6a 83       	std	Y+2, r22	; 0x02
    1650:	4b 83       	std	Y+3, r20	; 0x03
	switch (val) {
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	39 87       	std	Y+9, r19	; 0x09
    165a:	28 87       	std	Y+8, r18	; 0x08
    165c:	88 85       	ldd	r24, Y+8	; 0x08
    165e:	99 85       	ldd	r25, Y+9	; 0x09
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	39 f0       	breq	.+14     	; 0x1672 <SetPinVal+0x3a>
    1664:	28 85       	ldd	r18, Y+8	; 0x08
    1666:	39 85       	ldd	r19, Y+9	; 0x09
    1668:	21 30       	cpi	r18, 0x01	; 1
    166a:	31 05       	cpc	r19, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <SetPinVal+0x38>
    166e:	75 c0       	rjmp	.+234    	; 0x175a <SetPinVal+0x122>
    1670:	e2 c0       	rjmp	.+452    	; 0x1836 <SetPinVal+0x1fe>
	case PIN_LOW:
		switch (port) {
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	3f 83       	std	Y+7, r19	; 0x07
    167a:	2e 83       	std	Y+6, r18	; 0x06
    167c:	8e 81       	ldd	r24, Y+6	; 0x06
    167e:	9f 81       	ldd	r25, Y+7	; 0x07
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	59 f1       	breq	.+86     	; 0x16dc <SetPinVal+0xa4>
    1686:	2e 81       	ldd	r18, Y+6	; 0x06
    1688:	3f 81       	ldd	r19, Y+7	; 0x07
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	2c f4       	brge	.+10     	; 0x169a <SetPinVal+0x62>
    1690:	8e 81       	ldd	r24, Y+6	; 0x06
    1692:	9f 81       	ldd	r25, Y+7	; 0x07
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	69 f0       	breq	.+26     	; 0x16b2 <SetPinVal+0x7a>
    1698:	ce c0       	rjmp	.+412    	; 0x1836 <SetPinVal+0x1fe>
    169a:	2e 81       	ldd	r18, Y+6	; 0x06
    169c:	3f 81       	ldd	r19, Y+7	; 0x07
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	89 f1       	breq	.+98     	; 0x1706 <SetPinVal+0xce>
    16a4:	8e 81       	ldd	r24, Y+6	; 0x06
    16a6:	9f 81       	ldd	r25, Y+7	; 0x07
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	91 05       	cpc	r25, r1
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <SetPinVal+0x78>
    16ae:	40 c0       	rjmp	.+128    	; 0x1730 <SetPinVal+0xf8>
    16b0:	c2 c0       	rjmp	.+388    	; 0x1836 <SetPinVal+0x1fe>
		case DIO_PORTA:
			ClearBit(PORTA, pin);
    16b2:	ab e3       	ldi	r26, 0x3B	; 59
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	eb e3       	ldi	r30, 0x3B	; 59
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <SetPinVal+0x98>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <SetPinVal+0x94>
    16d4:	80 95       	com	r24
    16d6:	84 23       	and	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	ad c0       	rjmp	.+346    	; 0x1836 <SetPinVal+0x1fe>
			break;
		case DIO_PORTB:
			ClearBit(PORTB, pin);
    16dc:	a8 e3       	ldi	r26, 0x38	; 56
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e8 e3       	ldi	r30, 0x38	; 56
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <SetPinVal+0xc2>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <SetPinVal+0xbe>
    16fe:	80 95       	com	r24
    1700:	84 23       	and	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	98 c0       	rjmp	.+304    	; 0x1836 <SetPinVal+0x1fe>
			break;
		case DIO_PORTC:
			ClearBit(PORTC, pin);
    1706:	a5 e3       	ldi	r26, 0x35	; 53
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e5 e3       	ldi	r30, 0x35	; 53
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <SetPinVal+0xec>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <SetPinVal+0xe8>
    1728:	80 95       	com	r24
    172a:	84 23       	and	r24, r20
    172c:	8c 93       	st	X, r24
    172e:	83 c0       	rjmp	.+262    	; 0x1836 <SetPinVal+0x1fe>
			break;
		case DIO_PORTD:
			ClearBit(PORTD, pin);
    1730:	a2 e3       	ldi	r26, 0x32	; 50
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e2 e3       	ldi	r30, 0x32	; 50
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <SetPinVal+0x116>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <SetPinVal+0x112>
    1752:	80 95       	com	r24
    1754:	84 23       	and	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	6e c0       	rjmp	.+220    	; 0x1836 <SetPinVal+0x1fe>
			break;

		}
		break;
	case PIN_HIGH:
		switch (port) {
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	3d 83       	std	Y+5, r19	; 0x05
    1762:	2c 83       	std	Y+4, r18	; 0x04
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	9d 81       	ldd	r25, Y+5	; 0x05
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	91 05       	cpc	r25, r1
    176c:	49 f1       	breq	.+82     	; 0x17c0 <SetPinVal+0x188>
    176e:	2c 81       	ldd	r18, Y+4	; 0x04
    1770:	3d 81       	ldd	r19, Y+5	; 0x05
    1772:	22 30       	cpi	r18, 0x02	; 2
    1774:	31 05       	cpc	r19, r1
    1776:	2c f4       	brge	.+10     	; 0x1782 <SetPinVal+0x14a>
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	61 f0       	breq	.+24     	; 0x1798 <SetPinVal+0x160>
    1780:	5a c0       	rjmp	.+180    	; 0x1836 <SetPinVal+0x1fe>
    1782:	2c 81       	ldd	r18, Y+4	; 0x04
    1784:	3d 81       	ldd	r19, Y+5	; 0x05
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	71 f1       	breq	.+92     	; 0x17e8 <SetPinVal+0x1b0>
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	83 30       	cpi	r24, 0x03	; 3
    1792:	91 05       	cpc	r25, r1
    1794:	e9 f1       	breq	.+122    	; 0x1810 <SetPinVal+0x1d8>
    1796:	4f c0       	rjmp	.+158    	; 0x1836 <SetPinVal+0x1fe>
		case DIO_PORTA:
			SetBit(PORTA, pin);
    1798:	ab e3       	ldi	r26, 0x3B	; 59
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	eb e3       	ldi	r30, 0x3B	; 59
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <SetPinVal+0x17e>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <SetPinVal+0x17a>
    17ba:	84 2b       	or	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	3b c0       	rjmp	.+118    	; 0x1836 <SetPinVal+0x1fe>
			break;
		case DIO_PORTB:
			SetBit(PORTB, pin);
    17c0:	a8 e3       	ldi	r26, 0x38	; 56
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e8 e3       	ldi	r30, 0x38	; 56
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 2e       	mov	r0, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <SetPinVal+0x1a6>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	0a 94       	dec	r0
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <SetPinVal+0x1a2>
    17e2:	84 2b       	or	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	27 c0       	rjmp	.+78     	; 0x1836 <SetPinVal+0x1fe>
			break;
		case DIO_PORTC:
			SetBit(PORTC, pin);
    17e8:	a5 e3       	ldi	r26, 0x35	; 53
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e5 e3       	ldi	r30, 0x35	; 53
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <SetPinVal+0x1ce>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <SetPinVal+0x1ca>
    180a:	84 2b       	or	r24, r20
    180c:	8c 93       	st	X, r24
    180e:	13 c0       	rjmp	.+38     	; 0x1836 <SetPinVal+0x1fe>
			break;
		case DIO_PORTD:
			SetBit(PORTD, pin);
    1810:	a2 e3       	ldi	r26, 0x32	; 50
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e2 e3       	ldi	r30, 0x32	; 50
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <SetPinVal+0x1f6>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <SetPinVal+0x1f2>
    1832:	84 2b       	or	r24, r20
    1834:	8c 93       	st	X, r24
		}
		break;

	}

}
    1836:	29 96       	adiw	r28, 0x09	; 9
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <TogglePin>:
void TogglePin(u8 port, u8 pin) {
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <TogglePin+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <TogglePin+0x8>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	6a 83       	std	Y+2, r22	; 0x02
	switch (port) {
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	3c 83       	std	Y+4, r19	; 0x04
    1860:	2b 83       	std	Y+3, r18	; 0x03
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	91 05       	cpc	r25, r1
    186a:	49 f1       	breq	.+82     	; 0x18be <TogglePin+0x76>
    186c:	2b 81       	ldd	r18, Y+3	; 0x03
    186e:	3c 81       	ldd	r19, Y+4	; 0x04
    1870:	22 30       	cpi	r18, 0x02	; 2
    1872:	31 05       	cpc	r19, r1
    1874:	2c f4       	brge	.+10     	; 0x1880 <TogglePin+0x38>
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	61 f0       	breq	.+24     	; 0x1896 <TogglePin+0x4e>
    187e:	5a c0       	rjmp	.+180    	; 0x1934 <TogglePin+0xec>
    1880:	2b 81       	ldd	r18, Y+3	; 0x03
    1882:	3c 81       	ldd	r19, Y+4	; 0x04
    1884:	22 30       	cpi	r18, 0x02	; 2
    1886:	31 05       	cpc	r19, r1
    1888:	71 f1       	breq	.+92     	; 0x18e6 <TogglePin+0x9e>
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	83 30       	cpi	r24, 0x03	; 3
    1890:	91 05       	cpc	r25, r1
    1892:	e9 f1       	breq	.+122    	; 0x190e <TogglePin+0xc6>
    1894:	4f c0       	rjmp	.+158    	; 0x1934 <TogglePin+0xec>
	case DIO_PORTA:
		ToggleBit(PORTA, pin);
    1896:	ab e3       	ldi	r26, 0x3B	; 59
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	eb e3       	ldi	r30, 0x3B	; 59
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 2e       	mov	r0, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <TogglePin+0x6c>
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <TogglePin+0x68>
    18b8:	84 27       	eor	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	3b c0       	rjmp	.+118    	; 0x1934 <TogglePin+0xec>
		break;
	case DIO_PORTB:
		ToggleBit(PORTB, pin);
    18be:	a8 e3       	ldi	r26, 0x38	; 56
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e8 e3       	ldi	r30, 0x38	; 56
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <TogglePin+0x94>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <TogglePin+0x90>
    18e0:	84 27       	eor	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	27 c0       	rjmp	.+78     	; 0x1934 <TogglePin+0xec>
		break;
	case DIO_PORTC:
		ToggleBit(PORTC, pin);
    18e6:	a5 e3       	ldi	r26, 0x35	; 53
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e5 e3       	ldi	r30, 0x35	; 53
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <TogglePin+0xbc>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <TogglePin+0xb8>
    1908:	84 27       	eor	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	13 c0       	rjmp	.+38     	; 0x1934 <TogglePin+0xec>
		break;
	case DIO_PORTD:
		ToggleBit(PORTD, pin);
    190e:	a2 e3       	ldi	r26, 0x32	; 50
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e2 e3       	ldi	r30, 0x32	; 50
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <TogglePin+0xe4>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <TogglePin+0xe0>
    1930:	84 27       	eor	r24, r20
    1932:	8c 93       	st	X, r24
		break;

	}
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <DIO_GetPinVal>:
u8 DIO_GetPinVal(u8 port, u8 pin) {
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <DIO_GetPinVal+0x6>
    1948:	00 d0       	rcall	.+0      	; 0x194a <DIO_GetPinVal+0x8>
    194a:	00 d0       	rcall	.+0      	; 0x194c <DIO_GetPinVal+0xa>
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	6a 83       	std	Y+2, r22	; 0x02
	switch (port) {
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3d 83       	std	Y+5, r19	; 0x05
    195c:	2c 83       	std	Y+4, r18	; 0x04
    195e:	4c 81       	ldd	r20, Y+4	; 0x04
    1960:	5d 81       	ldd	r21, Y+5	; 0x05
    1962:	41 30       	cpi	r20, 0x01	; 1
    1964:	51 05       	cpc	r21, r1
    1966:	49 f1       	breq	.+82     	; 0x19ba <DIO_GetPinVal+0x78>
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	9d 81       	ldd	r25, Y+5	; 0x05
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	91 05       	cpc	r25, r1
    1970:	34 f4       	brge	.+12     	; 0x197e <DIO_GetPinVal+0x3c>
    1972:	2c 81       	ldd	r18, Y+4	; 0x04
    1974:	3d 81       	ldd	r19, Y+5	; 0x05
    1976:	21 15       	cp	r18, r1
    1978:	31 05       	cpc	r19, r1
    197a:	61 f0       	breq	.+24     	; 0x1994 <DIO_GetPinVal+0x52>
    197c:	57 c0       	rjmp	.+174    	; 0x1a2c <DIO_GetPinVal+0xea>
    197e:	4c 81       	ldd	r20, Y+4	; 0x04
    1980:	5d 81       	ldd	r21, Y+5	; 0x05
    1982:	42 30       	cpi	r20, 0x02	; 2
    1984:	51 05       	cpc	r21, r1
    1986:	61 f1       	breq	.+88     	; 0x19e0 <DIO_GetPinVal+0x9e>
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	9d 81       	ldd	r25, Y+5	; 0x05
    198c:	83 30       	cpi	r24, 0x03	; 3
    198e:	91 05       	cpc	r25, r1
    1990:	d1 f1       	breq	.+116    	; 0x1a06 <DIO_GetPinVal+0xc4>
    1992:	4c c0       	rjmp	.+152    	; 0x1a2c <DIO_GetPinVal+0xea>
	case DIO_PORTA:
		return GetBit(PINA, pin);
    1994:	e9 e3       	ldi	r30, 0x39	; 57
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a9 01       	movw	r20, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <DIO_GetPinVal+0x6a>
    19a8:	55 95       	asr	r21
    19aa:	47 95       	ror	r20
    19ac:	8a 95       	dec	r24
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <DIO_GetPinVal+0x66>
    19b0:	ca 01       	movw	r24, r20
    19b2:	58 2f       	mov	r21, r24
    19b4:	51 70       	andi	r21, 0x01	; 1
    19b6:	5b 83       	std	Y+3, r21	; 0x03
    19b8:	3a c0       	rjmp	.+116    	; 0x1a2e <DIO_GetPinVal+0xec>

	case DIO_PORTB:
		return GetBit(PINB, pin);
    19ba:	e6 e3       	ldi	r30, 0x36	; 54
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a9 01       	movw	r20, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <DIO_GetPinVal+0x90>
    19ce:	55 95       	asr	r21
    19d0:	47 95       	ror	r20
    19d2:	8a 95       	dec	r24
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <DIO_GetPinVal+0x8c>
    19d6:	ca 01       	movw	r24, r20
    19d8:	58 2f       	mov	r21, r24
    19da:	51 70       	andi	r21, 0x01	; 1
    19dc:	5b 83       	std	Y+3, r21	; 0x03
    19de:	27 c0       	rjmp	.+78     	; 0x1a2e <DIO_GetPinVal+0xec>
	case DIO_PORTC:
		return GetBit(PINC, pin);
    19e0:	e3 e3       	ldi	r30, 0x33	; 51
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a9 01       	movw	r20, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_GetPinVal+0xb6>
    19f4:	55 95       	asr	r21
    19f6:	47 95       	ror	r20
    19f8:	8a 95       	dec	r24
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_GetPinVal+0xb2>
    19fc:	ca 01       	movw	r24, r20
    19fe:	58 2f       	mov	r21, r24
    1a00:	51 70       	andi	r21, 0x01	; 1
    1a02:	5b 83       	std	Y+3, r21	; 0x03
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <DIO_GetPinVal+0xec>
	case DIO_PORTD:
		return GetBit(PIND, pin);
    1a06:	e0 e3       	ldi	r30, 0x30	; 48
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a9 01       	movw	r20, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <DIO_GetPinVal+0xdc>
    1a1a:	55 95       	asr	r21
    1a1c:	47 95       	ror	r20
    1a1e:	8a 95       	dec	r24
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <DIO_GetPinVal+0xd8>
    1a22:	ca 01       	movw	r24, r20
    1a24:	58 2f       	mov	r21, r24
    1a26:	51 70       	andi	r21, 0x01	; 1
    1a28:	5b 83       	std	Y+3, r21	; 0x03
    1a2a:	01 c0       	rjmp	.+2      	; 0x1a2e <DIO_GetPinVal+0xec>
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <DIO_GetPinVal+0xf0>

	}
}
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	8e 83       	std	Y+6, r24	; 0x06
    1a32:	8e 81       	ldd	r24, Y+6	; 0x06
    1a34:	26 96       	adiw	r28, 0x06	; 6
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <DIO_GetPortVal>:
u8 DIO_GetPortVal(u8 port) {
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <DIO_GetPortVal+0x6>
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <DIO_GetPortVal+0x8>
    1a4e:	0f 92       	push	r0
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	3c 83       	std	Y+4, r19	; 0x04
    1a5e:	2b 83       	std	Y+3, r18	; 0x03
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	91 05       	cpc	r25, r1
    1a68:	d1 f0       	breq	.+52     	; 0x1a9e <DIO_GetPortVal+0x58>
    1a6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	31 05       	cpc	r19, r1
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <DIO_GetPortVal+0x38>
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <DIO_GetPortVal+0x4e>
    1a7c:	1f c0       	rjmp	.+62     	; 0x1abc <DIO_GetPortVal+0x76>
    1a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a80:	3c 81       	ldd	r19, Y+4	; 0x04
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	81 f0       	breq	.+32     	; 0x1aa8 <DIO_GetPortVal+0x62>
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	91 05       	cpc	r25, r1
    1a90:	81 f0       	breq	.+32     	; 0x1ab2 <DIO_GetPortVal+0x6c>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <DIO_GetPortVal+0x76>
	case DIO_PORTA:
		return PINA;
    1a94:	e9 e3       	ldi	r30, 0x39	; 57
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	90 81       	ld	r25, Z
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	10 c0       	rjmp	.+32     	; 0x1abe <DIO_GetPortVal+0x78>
		break;
	case DIO_PORTB:
		return PINB;
    1a9e:	e6 e3       	ldi	r30, 0x36	; 54
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	20 81       	ld	r18, Z
    1aa4:	2a 83       	std	Y+2, r18	; 0x02
    1aa6:	0b c0       	rjmp	.+22     	; 0x1abe <DIO_GetPortVal+0x78>
		break;
	case DIO_PORTC:
		return PINC;
    1aa8:	e3 e3       	ldi	r30, 0x33	; 51
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	30 81       	ld	r19, Z
    1aae:	3a 83       	std	Y+2, r19	; 0x02
    1ab0:	06 c0       	rjmp	.+12     	; 0x1abe <DIO_GetPortVal+0x78>
		break;
	case DIO_PORTD:
		return PIND;
    1ab2:	e0 e3       	ldi	r30, 0x30	; 48
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <DIO_GetPortVal+0x78>
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <DIO_GetPortVal+0x7c>
		break;

	}

}
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	9d 83       	std	Y+5, r25	; 0x05
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <DIO_PullUp>:
void DIO_PullUp(u8 port, u8 pin) {
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <DIO_PullUp+0x6>
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <DIO_PullUp+0x8>
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	6a 83       	std	Y+2, r22	; 0x02
	switch (port) {
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	3c 83       	std	Y+4, r19	; 0x04
    1aec:	2b 83       	std	Y+3, r18	; 0x03
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	91 05       	cpc	r25, r1
    1af6:	49 f1       	breq	.+82     	; 0x1b4a <DIO_PullUp+0x76>
    1af8:	2b 81       	ldd	r18, Y+3	; 0x03
    1afa:	3c 81       	ldd	r19, Y+4	; 0x04
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <DIO_PullUp+0x38>
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	61 f0       	breq	.+24     	; 0x1b22 <DIO_PullUp+0x4e>
    1b0a:	5a c0       	rjmp	.+180    	; 0x1bc0 <DIO_PullUp+0xec>
    1b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b10:	22 30       	cpi	r18, 0x02	; 2
    1b12:	31 05       	cpc	r19, r1
    1b14:	71 f1       	breq	.+92     	; 0x1b72 <DIO_PullUp+0x9e>
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	e9 f1       	breq	.+122    	; 0x1b9a <DIO_PullUp+0xc6>
    1b20:	4f c0       	rjmp	.+158    	; 0x1bc0 <DIO_PullUp+0xec>
	case DIO_PORTA:
		SetBit(PORTA, pin);
    1b22:	ab e3       	ldi	r26, 0x3B	; 59
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	eb e3       	ldi	r30, 0x3B	; 59
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 2e       	mov	r0, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <DIO_PullUp+0x6c>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <DIO_PullUp+0x68>
    1b44:	84 2b       	or	r24, r20
    1b46:	8c 93       	st	X, r24
    1b48:	3b c0       	rjmp	.+118    	; 0x1bc0 <DIO_PullUp+0xec>
		break;
	case DIO_PORTB:
		SetBit(PORTB, pin);
    1b4a:	a8 e3       	ldi	r26, 0x38	; 56
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e8 e3       	ldi	r30, 0x38	; 56
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <DIO_PullUp+0x94>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <DIO_PullUp+0x90>
    1b6c:	84 2b       	or	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	27 c0       	rjmp	.+78     	; 0x1bc0 <DIO_PullUp+0xec>
		break;
	case DIO_PORTC:
		SetBit(PORTC, pin);
    1b72:	a5 e3       	ldi	r26, 0x35	; 53
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e5 e3       	ldi	r30, 0x35	; 53
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <DIO_PullUp+0xbc>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <DIO_PullUp+0xb8>
    1b94:	84 2b       	or	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	13 c0       	rjmp	.+38     	; 0x1bc0 <DIO_PullUp+0xec>
		break;
	case DIO_PORTD:
		SetBit(PORTD, pin);
    1b9a:	a2 e3       	ldi	r26, 0x32	; 50
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e2 e3       	ldi	r30, 0x32	; 50
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <DIO_PullUp+0xe4>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <DIO_PullUp+0xe0>
    1bbc:	84 2b       	or	r24, r20
    1bbe:	8c 93       	st	X, r24
		break;
	}
}
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <initADC>:
 digitalValue = ADCL;
 digitalValue |= ADCH<<8 ;
 return digitalValue;
 }
 */
void initADC() {
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00;
    1bd6:	ea e3       	ldi	r30, 0x3A	; 58
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	10 82       	st	Z, r1
	// 1- Select Channel ;
	SetBit(ADMUX, 0);
    1bdc:	a7 e2       	ldi	r26, 0x27	; 39
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e7 e2       	ldi	r30, 0x27	; 39
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	81 60       	ori	r24, 0x01	; 1
    1be8:	8c 93       	st	X, r24

	//2-Reference voltage
	SetBit(ADMUX, 6);
    1bea:	a7 e2       	ldi	r26, 0x27	; 39
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e7 e2       	ldi	r30, 0x27	; 39
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	80 64       	ori	r24, 0x40	; 64
    1bf6:	8c 93       	st	X, r24
	ClearBit(ADMUX, 7);
    1bf8:	a7 e2       	ldi	r26, 0x27	; 39
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e7 e2       	ldi	r30, 0x27	; 39
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	8f 77       	andi	r24, 0x7F	; 127
    1c04:	8c 93       	st	X, r24
	//SET_Bit(ADMUX,6);
	//CLR_Bit(ADMUX,7);
	//3-PreScalar
	ClearBit(ADCSRA, 0);
    1c06:	a6 e2       	ldi	r26, 0x26	; 38
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e6 e2       	ldi	r30, 0x26	; 38
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	8e 7f       	andi	r24, 0xFE	; 254
    1c12:	8c 93       	st	X, r24
	SetBit(ADCSRA, 1);
    1c14:	a6 e2       	ldi	r26, 0x26	; 38
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e6 e2       	ldi	r30, 0x26	; 38
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	82 60       	ori	r24, 0x02	; 2
    1c20:	8c 93       	st	X, r24
	SetBit(ADCSRA, 2);
    1c22:	a6 e2       	ldi	r26, 0x26	; 38
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e6 e2       	ldi	r30, 0x26	; 38
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	84 60       	ori	r24, 0x04	; 4
    1c2e:	8c 93       	st	X, r24

	//4-Right Adjust
	ClearBit(ADMUX, 5);
    1c30:	a7 e2       	ldi	r26, 0x27	; 39
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e7 e2       	ldi	r30, 0x27	; 39
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8f 7d       	andi	r24, 0xDF	; 223
    1c3c:	8c 93       	st	X, r24
	//5-auto Trigger
	SetBit(ADCSRA, 5);
    1c3e:	a6 e2       	ldi	r26, 0x26	; 38
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e6 e2       	ldi	r30, 0x26	; 38
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	80 62       	ori	r24, 0x20	; 32
    1c4a:	8c 93       	st	X, r24
	//6-Enable ADC
	SetBit(ADCSRA, 7);
    1c4c:	a6 e2       	ldi	r26, 0x26	; 38
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e6 e2       	ldi	r30, 0x26	; 38
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	80 68       	ori	r24, 0x80	; 128
    1c58:	8c 93       	st	X, r24

}
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <ADC_Read>:
u16 ADC_Read(void) { // Read Data ;
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <ADC_Read+0x6>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
//1-Start Conversion
	SetBit(ADCSRA, 6);
    1c6a:	a6 e2       	ldi	r26, 0x26	; 38
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e6 e2       	ldi	r30, 0x26	; 38
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	80 64       	ori	r24, 0x40	; 64
    1c76:	8c 93       	st	X, r24
//2-Until flag == 1 ;
	while (GetBit(ADCSRA,4) == 0) {
    1c78:	e6 e2       	ldi	r30, 0x26	; 38
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	82 95       	swap	r24
    1c80:	8f 70       	andi	r24, 0x0F	; 15
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	81 70       	andi	r24, 0x01	; 1
    1c88:	90 70       	andi	r25, 0x00	; 0
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	a9 f3       	breq	.-22     	; 0x1c78 <ADC_Read+0x18>
	}

//3-Return Data
	//u16 digitalVal = 0;
	//digitalVal = ADCH << 8 | ADCL;
	u16 digitalValue = 0;
    1c8e:	1a 82       	std	Y+2, r1	; 0x02
    1c90:	19 82       	std	Y+1, r1	; 0x01
	digitalValue = ADCL;
    1c92:	e4 e2       	ldi	r30, 0x24	; 36
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	digitalValue |= ADCH << 8;
    1ca0:	e5 e2       	ldi	r30, 0x25	; 37
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	88 2f       	mov	r24, r24
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	98 2f       	mov	r25, r24
    1cac:	88 27       	eor	r24, r24
    1cae:	9c 01       	movw	r18, r24
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	82 2b       	or	r24, r18
    1cb6:	93 2b       	or	r25, r19
    1cb8:	9a 83       	std	Y+2, r25	; 0x02
    1cba:	89 83       	std	Y+1, r24	; 0x01
	return digitalValue;
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <initStepperMotor>:
#include "../../MCAL/DIO/int.h"
#include "../../LIB/Def_Types.h"
#include "int.h"
#include <avr/delay.h>

void initStepperMotor(u8 port, u8 pin_1, u8 pin_2, u8 pin_3, u8 pin_4) {
    1cca:	0f 93       	push	r16
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <initStepperMotor+0x8>
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <initStepperMotor+0xa>
    1cd4:	0f 92       	push	r0
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	6a 83       	std	Y+2, r22	; 0x02
    1cde:	4b 83       	std	Y+3, r20	; 0x03
    1ce0:	2c 83       	std	Y+4, r18	; 0x04
    1ce2:	0d 83       	std	Y+5, r16	; 0x05
	SetPinDir(port, pin_1, PIN_OUT);
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(port, pin_2, PIN_OUT);
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	6b 81       	ldd	r22, Y+3	; 0x03
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(port, pin_3, PIN_OUT);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	6c 81       	ldd	r22, Y+4	; 0x04
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(port, pin_4, PIN_OUT);
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	6d 81       	ldd	r22, Y+5	; 0x05
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>

}
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	0f 91       	pop	r16
    1d1c:	08 95       	ret

00001d1e <StepperMotorCW>:
void StepperMotorCW(u8 port, u8 pin_1, u8 pin_2, u8 pin_3, u8 pin_4, u8 angel) {
    1d1e:	ef 92       	push	r14
    1d20:	0f 93       	push	r16
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	c1 54       	subi	r28, 0x41	; 65
    1d2c:	d0 40       	sbci	r29, 0x00	; 0
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	8c af       	std	Y+60, r24	; 0x3c
    1d3a:	6d af       	std	Y+61, r22	; 0x3d
    1d3c:	4e af       	std	Y+62, r20	; 0x3e
    1d3e:	2f af       	std	Y+63, r18	; 0x3f
    1d40:	fe 01       	movw	r30, r28
    1d42:	e0 5c       	subi	r30, 0xC0	; 192
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	00 83       	st	Z, r16
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ef 5b       	subi	r30, 0xBF	; 191
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	e0 82       	st	Z, r14
	u8 cycles = (angel / AngelPerStep) / 4;
    1d50:	fe 01       	movw	r30, r28
    1d52:	ef 5b       	subi	r30, 0xBF	; 191
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	80 81       	ld	r24, Z
    1d58:	98 e2       	ldi	r25, 0x28	; 40
    1d5a:	69 2f       	mov	r22, r25
    1d5c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <__udivmodqi4>
    1d60:	8b af       	std	Y+59, r24	; 0x3b
	for (int i = 0; i < cycles; i++) {
    1d62:	1a ae       	std	Y+58, r1	; 0x3a
    1d64:	19 ae       	std	Y+57, r1	; 0x39
    1d66:	29 c2       	rjmp	.+1106   	; 0x21ba <StepperMotorCW+0x49c>
		//Step 1
		SetPinVal(port, pin_1, PIN_HIGH);
    1d68:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d6a:	6d ad       	ldd	r22, Y+61	; 0x3d
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_2, PIN_LOW);
    1d72:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d74:	6e ad       	ldd	r22, Y+62	; 0x3e
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_3, PIN_LOW);
    1d7c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d7e:	6f ad       	ldd	r22, Y+63	; 0x3f
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_4, PIN_LOW);
    1d86:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e0 5c       	subi	r30, 0xC0	; 192
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	60 81       	ld	r22, Z
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a8 e4       	ldi	r26, 0x48	; 72
    1d9c:	b2 e4       	ldi	r27, 0x42	; 66
    1d9e:	8d ab       	std	Y+53, r24	; 0x35
    1da0:	9e ab       	std	Y+54, r25	; 0x36
    1da2:	af ab       	std	Y+55, r26	; 0x37
    1da4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da6:	6d a9       	ldd	r22, Y+53	; 0x35
    1da8:	7e a9       	ldd	r23, Y+54	; 0x36
    1daa:	8f a9       	ldd	r24, Y+55	; 0x37
    1dac:	98 ad       	ldd	r25, Y+56	; 0x38
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	4a ef       	ldi	r20, 0xFA	; 250
    1db4:	54 e4       	ldi	r21, 0x44	; 68
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	89 ab       	std	Y+49, r24	; 0x31
    1dc0:	9a ab       	std	Y+50, r25	; 0x32
    1dc2:	ab ab       	std	Y+51, r26	; 0x33
    1dc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dca:	8b a9       	ldd	r24, Y+51	; 0x33
    1dcc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e8       	ldi	r20, 0x80	; 128
    1dd4:	5f e3       	ldi	r21, 0x3F	; 63
    1dd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dda:	88 23       	and	r24, r24
    1ddc:	2c f4       	brge	.+10     	; 0x1de8 <StepperMotorCW+0xca>
		__ticks = 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	98 ab       	std	Y+48, r25	; 0x30
    1de4:	8f a7       	std	Y+47, r24	; 0x2f
    1de6:	3f c0       	rjmp	.+126    	; 0x1e66 <StepperMotorCW+0x148>
	else if (__tmp > 65535)
    1de8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dea:	7a a9       	ldd	r23, Y+50	; 0x32
    1dec:	8b a9       	ldd	r24, Y+51	; 0x33
    1dee:	9c a9       	ldd	r25, Y+52	; 0x34
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	57 e4       	ldi	r21, 0x47	; 71
    1df8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	4c f5       	brge	.+82     	; 0x1e52 <StepperMotorCW+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e00:	6d a9       	ldd	r22, Y+53	; 0x35
    1e02:	7e a9       	ldd	r23, Y+54	; 0x36
    1e04:	8f a9       	ldd	r24, Y+55	; 0x37
    1e06:	98 ad       	ldd	r25, Y+56	; 0x38
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e2       	ldi	r20, 0x20	; 32
    1e0e:	51 e4       	ldi	r21, 0x41	; 65
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	98 ab       	std	Y+48, r25	; 0x30
    1e26:	8f a7       	std	Y+47, r24	; 0x2f
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <StepperMotorCW+0x12a>
    1e2a:	88 ec       	ldi	r24, 0xC8	; 200
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9e a7       	std	Y+46, r25	; 0x2e
    1e30:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e32:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e34:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <StepperMotorCW+0x118>
    1e3a:	9e a7       	std	Y+46, r25	; 0x2e
    1e3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e40:	98 a9       	ldd	r25, Y+48	; 0x30
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	98 ab       	std	Y+48, r25	; 0x30
    1e46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	69 f7       	brne	.-38     	; 0x1e2a <StepperMotorCW+0x10c>
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <StepperMotorCW+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e52:	69 a9       	ldd	r22, Y+49	; 0x31
    1e54:	7a a9       	ldd	r23, Y+50	; 0x32
    1e56:	8b a9       	ldd	r24, Y+51	; 0x33
    1e58:	9c a9       	ldd	r25, Y+52	; 0x34
    1e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	98 ab       	std	Y+48, r25	; 0x30
    1e64:	8f a7       	std	Y+47, r24	; 0x2f
    1e66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e68:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6a:	9c a7       	std	Y+44, r25	; 0x2c
    1e6c:	8b a7       	std	Y+43, r24	; 0x2b
    1e6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e70:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <StepperMotorCW+0x154>
    1e76:	9c a7       	std	Y+44, r25	; 0x2c
    1e78:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);

		//Step 2
		SetPinVal(port, pin_1, PIN_LOW);
    1e7a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e7c:	6d ad       	ldd	r22, Y+61	; 0x3d
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_2, PIN_HIGH);
    1e84:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e86:	6e ad       	ldd	r22, Y+62	; 0x3e
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_3, PIN_LOW);
    1e8e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e90:	6f ad       	ldd	r22, Y+63	; 0x3f
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_4, PIN_LOW);
    1e98:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e0 5c       	subi	r30, 0xC0	; 192
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	60 81       	ld	r22, Z
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a8 e4       	ldi	r26, 0x48	; 72
    1eae:	b2 e4       	ldi	r27, 0x42	; 66
    1eb0:	8f a3       	std	Y+39, r24	; 0x27
    1eb2:	98 a7       	std	Y+40, r25	; 0x28
    1eb4:	a9 a7       	std	Y+41, r26	; 0x29
    1eb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eba:	78 a5       	ldd	r23, Y+40	; 0x28
    1ebc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ebe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a ef       	ldi	r20, 0xFA	; 250
    1ec6:	54 e4       	ldi	r21, 0x44	; 68
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8b a3       	std	Y+35, r24	; 0x23
    1ed2:	9c a3       	std	Y+36, r25	; 0x24
    1ed4:	ad a3       	std	Y+37, r26	; 0x25
    1ed6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eda:	7c a1       	ldd	r23, Y+36	; 0x24
    1edc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ede:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <StepperMotorCW+0x1dc>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <StepperMotorCW+0x25a>
	else if (__tmp > 65535)
    1efa:	6b a1       	ldd	r22, Y+35	; 0x23
    1efc:	7c a1       	ldd	r23, Y+36	; 0x24
    1efe:	8d a1       	ldd	r24, Y+37	; 0x25
    1f00:	9e a1       	ldd	r25, Y+38	; 0x26
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <StepperMotorCW+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	6f a1       	ldd	r22, Y+39	; 0x27
    1f14:	78 a5       	ldd	r23, Y+40	; 0x28
    1f16:	89 a5       	ldd	r24, Y+41	; 0x29
    1f18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9a a3       	std	Y+34, r25	; 0x22
    1f38:	89 a3       	std	Y+33, r24	; 0x21
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <StepperMotorCW+0x23c>
    1f3c:	88 ec       	ldi	r24, 0xC8	; 200
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	98 a3       	std	Y+32, r25	; 0x20
    1f42:	8f 8f       	std	Y+31, r24	; 0x1f
    1f44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f46:	98 a1       	ldd	r25, Y+32	; 0x20
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <StepperMotorCW+0x22a>
    1f4c:	98 a3       	std	Y+32, r25	; 0x20
    1f4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	89 a1       	ldd	r24, Y+33	; 0x21
    1f52:	9a a1       	ldd	r25, Y+34	; 0x22
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9a a3       	std	Y+34, r25	; 0x22
    1f58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <StepperMotorCW+0x21e>
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <StepperMotorCW+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	6b a1       	ldd	r22, Y+35	; 0x23
    1f66:	7c a1       	ldd	r23, Y+36	; 0x24
    1f68:	8d a1       	ldd	r24, Y+37	; 0x25
    1f6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9a a3       	std	Y+34, r25	; 0x22
    1f76:	89 a3       	std	Y+33, r24	; 0x21
    1f78:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <StepperMotorCW+0x266>
    1f88:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);

		//Step3
		SetPinVal(port, pin_1, PIN_LOW);
    1f8c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f8e:	6d ad       	ldd	r22, Y+61	; 0x3d
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_2, PIN_LOW);
    1f96:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f98:	6e ad       	ldd	r22, Y+62	; 0x3e
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_3, PIN_HIGH);
    1fa0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fa2:	6f ad       	ldd	r22, Y+63	; 0x3f
    1fa4:	41 e0       	ldi	r20, 0x01	; 1
    1fa6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_4, PIN_LOW);
    1faa:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fac:	fe 01       	movw	r30, r28
    1fae:	e0 5c       	subi	r30, 0xC0	; 192
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	60 81       	ld	r22, Z
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a8 e4       	ldi	r26, 0x48	; 72
    1fc0:	b2 e4       	ldi	r27, 0x42	; 66
    1fc2:	89 8f       	std	Y+25, r24	; 0x19
    1fc4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fc6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fca:	69 8d       	ldd	r22, Y+25	; 0x19
    1fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a ef       	ldi	r20, 0xFA	; 250
    1fd8:	54 e4       	ldi	r21, 0x44	; 68
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8d 8b       	std	Y+21, r24	; 0x15
    1fe4:	9e 8b       	std	Y+22, r25	; 0x16
    1fe6:	af 8b       	std	Y+23, r26	; 0x17
    1fe8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fea:	6d 89       	ldd	r22, Y+21	; 0x15
    1fec:	7e 89       	ldd	r23, Y+22	; 0x16
    1fee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	2c f4       	brge	.+10     	; 0x200c <StepperMotorCW+0x2ee>
		__ticks = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9c 8b       	std	Y+20, r25	; 0x14
    2008:	8b 8b       	std	Y+19, r24	; 0x13
    200a:	3f c0       	rjmp	.+126    	; 0x208a <StepperMotorCW+0x36c>
	else if (__tmp > 65535)
    200c:	6d 89       	ldd	r22, Y+21	; 0x15
    200e:	7e 89       	ldd	r23, Y+22	; 0x16
    2010:	8f 89       	ldd	r24, Y+23	; 0x17
    2012:	98 8d       	ldd	r25, Y+24	; 0x18
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	4f e7       	ldi	r20, 0x7F	; 127
    201a:	57 e4       	ldi	r21, 0x47	; 71
    201c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2020:	18 16       	cp	r1, r24
    2022:	4c f5       	brge	.+82     	; 0x2076 <StepperMotorCW+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2024:	69 8d       	ldd	r22, Y+25	; 0x19
    2026:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2028:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9c 8b       	std	Y+20, r25	; 0x14
    204a:	8b 8b       	std	Y+19, r24	; 0x13
    204c:	0f c0       	rjmp	.+30     	; 0x206c <StepperMotorCW+0x34e>
    204e:	88 ec       	ldi	r24, 0xC8	; 200
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9a 8b       	std	Y+18, r25	; 0x12
    2054:	89 8b       	std	Y+17, r24	; 0x11
    2056:	89 89       	ldd	r24, Y+17	; 0x11
    2058:	9a 89       	ldd	r25, Y+18	; 0x12
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <StepperMotorCW+0x33c>
    205e:	9a 8b       	std	Y+18, r25	; 0x12
    2060:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	8b 89       	ldd	r24, Y+19	; 0x13
    2064:	9c 89       	ldd	r25, Y+20	; 0x14
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	9c 8b       	std	Y+20, r25	; 0x14
    206a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206c:	8b 89       	ldd	r24, Y+19	; 0x13
    206e:	9c 89       	ldd	r25, Y+20	; 0x14
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	69 f7       	brne	.-38     	; 0x204e <StepperMotorCW+0x330>
    2074:	14 c0       	rjmp	.+40     	; 0x209e <StepperMotorCW+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2076:	6d 89       	ldd	r22, Y+21	; 0x15
    2078:	7e 89       	ldd	r23, Y+22	; 0x16
    207a:	8f 89       	ldd	r24, Y+23	; 0x17
    207c:	98 8d       	ldd	r25, Y+24	; 0x18
    207e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9c 8b       	std	Y+20, r25	; 0x14
    2088:	8b 8b       	std	Y+19, r24	; 0x13
    208a:	8b 89       	ldd	r24, Y+19	; 0x13
    208c:	9c 89       	ldd	r25, Y+20	; 0x14
    208e:	98 8b       	std	Y+16, r25	; 0x10
    2090:	8f 87       	std	Y+15, r24	; 0x0f
    2092:	8f 85       	ldd	r24, Y+15	; 0x0f
    2094:	98 89       	ldd	r25, Y+16	; 0x10
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <StepperMotorCW+0x378>
    209a:	98 8b       	std	Y+16, r25	; 0x10
    209c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		//Step4
		SetPinVal(port, pin_1, PIN_LOW);
    209e:	8c ad       	ldd	r24, Y+60	; 0x3c
    20a0:	6d ad       	ldd	r22, Y+61	; 0x3d
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_2, PIN_LOW);
    20a8:	8c ad       	ldd	r24, Y+60	; 0x3c
    20aa:	6e ad       	ldd	r22, Y+62	; 0x3e
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_3, PIN_LOW);
    20b2:	8c ad       	ldd	r24, Y+60	; 0x3c
    20b4:	6f ad       	ldd	r22, Y+63	; 0x3f
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_4, PIN_HIGH);
    20bc:	8c ad       	ldd	r24, Y+60	; 0x3c
    20be:	fe 01       	movw	r30, r28
    20c0:	e0 5c       	subi	r30, 0xC0	; 192
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	60 81       	ld	r22, Z
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a8 e4       	ldi	r26, 0x48	; 72
    20d2:	b2 e4       	ldi	r27, 0x42	; 66
    20d4:	8b 87       	std	Y+11, r24	; 0x0b
    20d6:	9c 87       	std	Y+12, r25	; 0x0c
    20d8:	ad 87       	std	Y+13, r26	; 0x0d
    20da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20de:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	4a ef       	ldi	r20, 0xFA	; 250
    20ea:	54 e4       	ldi	r21, 0x44	; 68
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	8f 83       	std	Y+7, r24	; 0x07
    20f6:	98 87       	std	Y+8, r25	; 0x08
    20f8:	a9 87       	std	Y+9, r26	; 0x09
    20fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	2c f4       	brge	.+10     	; 0x211e <StepperMotorCW+0x400>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9e 83       	std	Y+6, r25	; 0x06
    211a:	8d 83       	std	Y+5, r24	; 0x05
    211c:	3f c0       	rjmp	.+126    	; 0x219c <StepperMotorCW+0x47e>
	else if (__tmp > 65535)
    211e:	6f 81       	ldd	r22, Y+7	; 0x07
    2120:	78 85       	ldd	r23, Y+8	; 0x08
    2122:	89 85       	ldd	r24, Y+9	; 0x09
    2124:	9a 85       	ldd	r25, Y+10	; 0x0a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	3f ef       	ldi	r19, 0xFF	; 255
    212a:	4f e7       	ldi	r20, 0x7F	; 127
    212c:	57 e4       	ldi	r21, 0x47	; 71
    212e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2132:	18 16       	cp	r1, r24
    2134:	4c f5       	brge	.+82     	; 0x2188 <StepperMotorCW+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2136:	6b 85       	ldd	r22, Y+11	; 0x0b
    2138:	7c 85       	ldd	r23, Y+12	; 0x0c
    213a:	8d 85       	ldd	r24, Y+13	; 0x0d
    213c:	9e 85       	ldd	r25, Y+14	; 0x0e
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e2       	ldi	r20, 0x20	; 32
    2144:	51 e4       	ldi	r21, 0x41	; 65
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	bc 01       	movw	r22, r24
    2150:	cd 01       	movw	r24, r26
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	0f c0       	rjmp	.+30     	; 0x217e <StepperMotorCW+0x460>
    2160:	88 ec       	ldi	r24, 0xC8	; 200
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 83       	std	Y+4, r25	; 0x04
    2166:	8b 83       	std	Y+3, r24	; 0x03
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <StepperMotorCW+0x44e>
    2170:	9c 83       	std	Y+4, r25	; 0x04
    2172:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2174:	8d 81       	ldd	r24, Y+5	; 0x05
    2176:	9e 81       	ldd	r25, Y+6	; 0x06
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	69 f7       	brne	.-38     	; 0x2160 <StepperMotorCW+0x442>
    2186:	14 c0       	rjmp	.+40     	; 0x21b0 <StepperMotorCW+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2188:	6f 81       	ldd	r22, Y+7	; 0x07
    218a:	78 85       	ldd	r23, Y+8	; 0x08
    218c:	89 85       	ldd	r24, Y+9	; 0x09
    218e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <StepperMotorCW+0x48a>
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
	SetPinDir(port, pin_4, PIN_OUT);

}
void StepperMotorCW(u8 port, u8 pin_1, u8 pin_2, u8 pin_3, u8 pin_4, u8 angel) {
	u8 cycles = (angel / AngelPerStep) / 4;
	for (int i = 0; i < cycles; i++) {
    21b0:	89 ad       	ldd	r24, Y+57	; 0x39
    21b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    21b4:	01 96       	adiw	r24, 0x01	; 1
    21b6:	9a af       	std	Y+58, r25	; 0x3a
    21b8:	89 af       	std	Y+57, r24	; 0x39
    21ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	89 ad       	ldd	r24, Y+57	; 0x39
    21c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    21c4:	82 17       	cp	r24, r18
    21c6:	93 07       	cpc	r25, r19
    21c8:	0c f4       	brge	.+2      	; 0x21cc <StepperMotorCW+0x4ae>
    21ca:	ce cd       	rjmp	.-1124   	; 0x1d68 <StepperMotorCW+0x4a>
		SetPinVal(port, pin_4, PIN_HIGH);
		_delay_ms(50);

	}

}
    21cc:	cf 5b       	subi	r28, 0xBF	; 191
    21ce:	df 4f       	sbci	r29, 0xFF	; 255
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	0f 91       	pop	r16
    21e0:	ef 90       	pop	r14
    21e2:	08 95       	ret

000021e4 <StepperMotorCCW>:
void StepperMotorCCW(u8 port, u8 pin_1, u8 pin_2, u8 pin_3, u8 pin_4, u8 angel) {
    21e4:	ef 92       	push	r14
    21e6:	0f 93       	push	r16
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	c1 54       	subi	r28, 0x41	; 65
    21f2:	d0 40       	sbci	r29, 0x00	; 0
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	8c af       	std	Y+60, r24	; 0x3c
    2200:	6d af       	std	Y+61, r22	; 0x3d
    2202:	4e af       	std	Y+62, r20	; 0x3e
    2204:	2f af       	std	Y+63, r18	; 0x3f
    2206:	fe 01       	movw	r30, r28
    2208:	e0 5c       	subi	r30, 0xC0	; 192
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	00 83       	st	Z, r16
    220e:	fe 01       	movw	r30, r28
    2210:	ef 5b       	subi	r30, 0xBF	; 191
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	e0 82       	st	Z, r14
	u8 cycles = (angel / 10) / 4;
    2216:	fe 01       	movw	r30, r28
    2218:	ef 5b       	subi	r30, 0xBF	; 191
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	98 e2       	ldi	r25, 0x28	; 40
    2220:	69 2f       	mov	r22, r25
    2222:	0e 94 2c 1c 	call	0x3858	; 0x3858 <__udivmodqi4>
    2226:	8b af       	std	Y+59, r24	; 0x3b
	for (int i = 0; i < cycles; i++) {
    2228:	1a ae       	std	Y+58, r1	; 0x3a
    222a:	19 ae       	std	Y+57, r1	; 0x39
    222c:	29 c2       	rjmp	.+1106   	; 0x2680 <StepperMotorCCW+0x49c>
		//Step 1
		SetPinVal(port, pin_1, PIN_LOW);
    222e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2230:	6d ad       	ldd	r22, Y+61	; 0x3d
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_2, PIN_LOW);
    2238:	8c ad       	ldd	r24, Y+60	; 0x3c
    223a:	6e ad       	ldd	r22, Y+62	; 0x3e
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_3, PIN_LOW);
    2242:	8c ad       	ldd	r24, Y+60	; 0x3c
    2244:	6f ad       	ldd	r22, Y+63	; 0x3f
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_4, PIN_HIGH);
    224c:	8c ad       	ldd	r24, Y+60	; 0x3c
    224e:	fe 01       	movw	r30, r28
    2250:	e0 5c       	subi	r30, 0xC0	; 192
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	60 81       	ld	r22, Z
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a8 e4       	ldi	r26, 0x48	; 72
    2262:	b2 e4       	ldi	r27, 0x42	; 66
    2264:	8d ab       	std	Y+53, r24	; 0x35
    2266:	9e ab       	std	Y+54, r25	; 0x36
    2268:	af ab       	std	Y+55, r26	; 0x37
    226a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6d a9       	ldd	r22, Y+53	; 0x35
    226e:	7e a9       	ldd	r23, Y+54	; 0x36
    2270:	8f a9       	ldd	r24, Y+55	; 0x37
    2272:	98 ad       	ldd	r25, Y+56	; 0x38
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a ef       	ldi	r20, 0xFA	; 250
    227a:	54 e4       	ldi	r21, 0x44	; 68
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	89 ab       	std	Y+49, r24	; 0x31
    2286:	9a ab       	std	Y+50, r25	; 0x32
    2288:	ab ab       	std	Y+51, r26	; 0x33
    228a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    228c:	69 a9       	ldd	r22, Y+49	; 0x31
    228e:	7a a9       	ldd	r23, Y+50	; 0x32
    2290:	8b a9       	ldd	r24, Y+51	; 0x33
    2292:	9c a9       	ldd	r25, Y+52	; 0x34
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <StepperMotorCCW+0xca>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	98 ab       	std	Y+48, r25	; 0x30
    22aa:	8f a7       	std	Y+47, r24	; 0x2f
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <StepperMotorCCW+0x148>
	else if (__tmp > 65535)
    22ae:	69 a9       	ldd	r22, Y+49	; 0x31
    22b0:	7a a9       	ldd	r23, Y+50	; 0x32
    22b2:	8b a9       	ldd	r24, Y+51	; 0x33
    22b4:	9c a9       	ldd	r25, Y+52	; 0x34
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <StepperMotorCCW+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6d a9       	ldd	r22, Y+53	; 0x35
    22c8:	7e a9       	ldd	r23, Y+54	; 0x36
    22ca:	8f a9       	ldd	r24, Y+55	; 0x37
    22cc:	98 ad       	ldd	r25, Y+56	; 0x38
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	98 ab       	std	Y+48, r25	; 0x30
    22ec:	8f a7       	std	Y+47, r24	; 0x2f
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <StepperMotorCCW+0x12a>
    22f0:	88 ec       	ldi	r24, 0xC8	; 200
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9e a7       	std	Y+46, r25	; 0x2e
    22f6:	8d a7       	std	Y+45, r24	; 0x2d
    22f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <StepperMotorCCW+0x118>
    2300:	9e a7       	std	Y+46, r25	; 0x2e
    2302:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8f a5       	ldd	r24, Y+47	; 0x2f
    2306:	98 a9       	ldd	r25, Y+48	; 0x30
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	98 ab       	std	Y+48, r25	; 0x30
    230c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2310:	98 a9       	ldd	r25, Y+48	; 0x30
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <StepperMotorCCW+0x10c>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <StepperMotorCCW+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	69 a9       	ldd	r22, Y+49	; 0x31
    231a:	7a a9       	ldd	r23, Y+50	; 0x32
    231c:	8b a9       	ldd	r24, Y+51	; 0x33
    231e:	9c a9       	ldd	r25, Y+52	; 0x34
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	98 ab       	std	Y+48, r25	; 0x30
    232a:	8f a7       	std	Y+47, r24	; 0x2f
    232c:	8f a5       	ldd	r24, Y+47	; 0x2f
    232e:	98 a9       	ldd	r25, Y+48	; 0x30
    2330:	9c a7       	std	Y+44, r25	; 0x2c
    2332:	8b a7       	std	Y+43, r24	; 0x2b
    2334:	8b a5       	ldd	r24, Y+43	; 0x2b
    2336:	9c a5       	ldd	r25, Y+44	; 0x2c
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <StepperMotorCCW+0x154>
    233c:	9c a7       	std	Y+44, r25	; 0x2c
    233e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);

		//Step2
		SetPinVal(port, pin_1, PIN_LOW);
    2340:	8c ad       	ldd	r24, Y+60	; 0x3c
    2342:	6d ad       	ldd	r22, Y+61	; 0x3d
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_2, PIN_LOW);
    234a:	8c ad       	ldd	r24, Y+60	; 0x3c
    234c:	6e ad       	ldd	r22, Y+62	; 0x3e
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_3, PIN_HIGH);
    2354:	8c ad       	ldd	r24, Y+60	; 0x3c
    2356:	6f ad       	ldd	r22, Y+63	; 0x3f
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_4, PIN_LOW);
    235e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2360:	fe 01       	movw	r30, r28
    2362:	e0 5c       	subi	r30, 0xC0	; 192
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	60 81       	ld	r22, Z
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a8 e4       	ldi	r26, 0x48	; 72
    2374:	b2 e4       	ldi	r27, 0x42	; 66
    2376:	8f a3       	std	Y+39, r24	; 0x27
    2378:	98 a7       	std	Y+40, r25	; 0x28
    237a:	a9 a7       	std	Y+41, r26	; 0x29
    237c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	6f a1       	ldd	r22, Y+39	; 0x27
    2380:	78 a5       	ldd	r23, Y+40	; 0x28
    2382:	89 a5       	ldd	r24, Y+41	; 0x29
    2384:	9a a5       	ldd	r25, Y+42	; 0x2a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a ef       	ldi	r20, 0xFA	; 250
    238c:	54 e4       	ldi	r21, 0x44	; 68
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	8b a3       	std	Y+35, r24	; 0x23
    2398:	9c a3       	std	Y+36, r25	; 0x24
    239a:	ad a3       	std	Y+37, r26	; 0x25
    239c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    239e:	6b a1       	ldd	r22, Y+35	; 0x23
    23a0:	7c a1       	ldd	r23, Y+36	; 0x24
    23a2:	8d a1       	ldd	r24, Y+37	; 0x25
    23a4:	9e a1       	ldd	r25, Y+38	; 0x26
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <StepperMotorCCW+0x1dc>
		__ticks = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9a a3       	std	Y+34, r25	; 0x22
    23bc:	89 a3       	std	Y+33, r24	; 0x21
    23be:	3f c0       	rjmp	.+126    	; 0x243e <StepperMotorCCW+0x25a>
	else if (__tmp > 65535)
    23c0:	6b a1       	ldd	r22, Y+35	; 0x23
    23c2:	7c a1       	ldd	r23, Y+36	; 0x24
    23c4:	8d a1       	ldd	r24, Y+37	; 0x25
    23c6:	9e a1       	ldd	r25, Y+38	; 0x26
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	4c f5       	brge	.+82     	; 0x242a <StepperMotorCCW+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	6f a1       	ldd	r22, Y+39	; 0x27
    23da:	78 a5       	ldd	r23, Y+40	; 0x28
    23dc:	89 a5       	ldd	r24, Y+41	; 0x29
    23de:	9a a5       	ldd	r25, Y+42	; 0x2a
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9a a3       	std	Y+34, r25	; 0x22
    23fe:	89 a3       	std	Y+33, r24	; 0x21
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <StepperMotorCCW+0x23c>
    2402:	88 ec       	ldi	r24, 0xC8	; 200
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	98 a3       	std	Y+32, r25	; 0x20
    2408:	8f 8f       	std	Y+31, r24	; 0x1f
    240a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    240c:	98 a1       	ldd	r25, Y+32	; 0x20
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <StepperMotorCCW+0x22a>
    2412:	98 a3       	std	Y+32, r25	; 0x20
    2414:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	89 a1       	ldd	r24, Y+33	; 0x21
    2418:	9a a1       	ldd	r25, Y+34	; 0x22
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	9a a3       	std	Y+34, r25	; 0x22
    241e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2420:	89 a1       	ldd	r24, Y+33	; 0x21
    2422:	9a a1       	ldd	r25, Y+34	; 0x22
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	69 f7       	brne	.-38     	; 0x2402 <StepperMotorCCW+0x21e>
    2428:	14 c0       	rjmp	.+40     	; 0x2452 <StepperMotorCCW+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	6b a1       	ldd	r22, Y+35	; 0x23
    242c:	7c a1       	ldd	r23, Y+36	; 0x24
    242e:	8d a1       	ldd	r24, Y+37	; 0x25
    2430:	9e a1       	ldd	r25, Y+38	; 0x26
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9a a3       	std	Y+34, r25	; 0x22
    243c:	89 a3       	std	Y+33, r24	; 0x21
    243e:	89 a1       	ldd	r24, Y+33	; 0x21
    2440:	9a a1       	ldd	r25, Y+34	; 0x22
    2442:	9e 8f       	std	Y+30, r25	; 0x1e
    2444:	8d 8f       	std	Y+29, r24	; 0x1d
    2446:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2448:	9e 8d       	ldd	r25, Y+30	; 0x1e
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <StepperMotorCCW+0x266>
    244e:	9e 8f       	std	Y+30, r25	; 0x1e
    2450:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);

		//Step 3
		SetPinVal(port, pin_1, PIN_LOW);
    2452:	8c ad       	ldd	r24, Y+60	; 0x3c
    2454:	6d ad       	ldd	r22, Y+61	; 0x3d
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_2, PIN_HIGH);
    245c:	8c ad       	ldd	r24, Y+60	; 0x3c
    245e:	6e ad       	ldd	r22, Y+62	; 0x3e
    2460:	41 e0       	ldi	r20, 0x01	; 1
    2462:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_3, PIN_LOW);
    2466:	8c ad       	ldd	r24, Y+60	; 0x3c
    2468:	6f ad       	ldd	r22, Y+63	; 0x3f
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_4, PIN_LOW);
    2470:	8c ad       	ldd	r24, Y+60	; 0x3c
    2472:	fe 01       	movw	r30, r28
    2474:	e0 5c       	subi	r30, 0xC0	; 192
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	60 81       	ld	r22, Z
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a8 e4       	ldi	r26, 0x48	; 72
    2486:	b2 e4       	ldi	r27, 0x42	; 66
    2488:	89 8f       	std	Y+25, r24	; 0x19
    248a:	9a 8f       	std	Y+26, r25	; 0x1a
    248c:	ab 8f       	std	Y+27, r26	; 0x1b
    248e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2490:	69 8d       	ldd	r22, Y+25	; 0x19
    2492:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2494:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2496:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4a ef       	ldi	r20, 0xFA	; 250
    249e:	54 e4       	ldi	r21, 0x44	; 68
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8d 8b       	std	Y+21, r24	; 0x15
    24aa:	9e 8b       	std	Y+22, r25	; 0x16
    24ac:	af 8b       	std	Y+23, r26	; 0x17
    24ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b0:	6d 89       	ldd	r22, Y+21	; 0x15
    24b2:	7e 89       	ldd	r23, Y+22	; 0x16
    24b4:	8f 89       	ldd	r24, Y+23	; 0x17
    24b6:	98 8d       	ldd	r25, Y+24	; 0x18
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	2c f4       	brge	.+10     	; 0x24d2 <StepperMotorCCW+0x2ee>
		__ticks = 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9c 8b       	std	Y+20, r25	; 0x14
    24ce:	8b 8b       	std	Y+19, r24	; 0x13
    24d0:	3f c0       	rjmp	.+126    	; 0x2550 <StepperMotorCCW+0x36c>
	else if (__tmp > 65535)
    24d2:	6d 89       	ldd	r22, Y+21	; 0x15
    24d4:	7e 89       	ldd	r23, Y+22	; 0x16
    24d6:	8f 89       	ldd	r24, Y+23	; 0x17
    24d8:	98 8d       	ldd	r25, Y+24	; 0x18
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	3f ef       	ldi	r19, 0xFF	; 255
    24de:	4f e7       	ldi	r20, 0x7F	; 127
    24e0:	57 e4       	ldi	r21, 0x47	; 71
    24e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	4c f5       	brge	.+82     	; 0x253c <StepperMotorCCW+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ea:	69 8d       	ldd	r22, Y+25	; 0x19
    24ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9c 8b       	std	Y+20, r25	; 0x14
    2510:	8b 8b       	std	Y+19, r24	; 0x13
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <StepperMotorCCW+0x34e>
    2514:	88 ec       	ldi	r24, 0xC8	; 200
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9a 8b       	std	Y+18, r25	; 0x12
    251a:	89 8b       	std	Y+17, r24	; 0x11
    251c:	89 89       	ldd	r24, Y+17	; 0x11
    251e:	9a 89       	ldd	r25, Y+18	; 0x12
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <StepperMotorCCW+0x33c>
    2524:	9a 8b       	std	Y+18, r25	; 0x12
    2526:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	8b 89       	ldd	r24, Y+19	; 0x13
    252a:	9c 89       	ldd	r25, Y+20	; 0x14
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	9c 8b       	std	Y+20, r25	; 0x14
    2530:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2532:	8b 89       	ldd	r24, Y+19	; 0x13
    2534:	9c 89       	ldd	r25, Y+20	; 0x14
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	69 f7       	brne	.-38     	; 0x2514 <StepperMotorCCW+0x330>
    253a:	14 c0       	rjmp	.+40     	; 0x2564 <StepperMotorCCW+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253c:	6d 89       	ldd	r22, Y+21	; 0x15
    253e:	7e 89       	ldd	r23, Y+22	; 0x16
    2540:	8f 89       	ldd	r24, Y+23	; 0x17
    2542:	98 8d       	ldd	r25, Y+24	; 0x18
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9c 8b       	std	Y+20, r25	; 0x14
    254e:	8b 8b       	std	Y+19, r24	; 0x13
    2550:	8b 89       	ldd	r24, Y+19	; 0x13
    2552:	9c 89       	ldd	r25, Y+20	; 0x14
    2554:	98 8b       	std	Y+16, r25	; 0x10
    2556:	8f 87       	std	Y+15, r24	; 0x0f
    2558:	8f 85       	ldd	r24, Y+15	; 0x0f
    255a:	98 89       	ldd	r25, Y+16	; 0x10
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <StepperMotorCCW+0x378>
    2560:	98 8b       	std	Y+16, r25	; 0x10
    2562:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		//Step 4
		SetPinVal(port, pin_1, PIN_HIGH);
    2564:	8c ad       	ldd	r24, Y+60	; 0x3c
    2566:	6d ad       	ldd	r22, Y+61	; 0x3d
    2568:	41 e0       	ldi	r20, 0x01	; 1
    256a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_2, PIN_LOW);
    256e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2570:	6e ad       	ldd	r22, Y+62	; 0x3e
    2572:	40 e0       	ldi	r20, 0x00	; 0
    2574:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_3, PIN_LOW);
    2578:	8c ad       	ldd	r24, Y+60	; 0x3c
    257a:	6f ad       	ldd	r22, Y+63	; 0x3f
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
		SetPinVal(port, pin_4, PIN_LOW);
    2582:	8c ad       	ldd	r24, Y+60	; 0x3c
    2584:	fe 01       	movw	r30, r28
    2586:	e0 5c       	subi	r30, 0xC0	; 192
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	60 81       	ld	r22, Z
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a8 e4       	ldi	r26, 0x48	; 72
    2598:	b2 e4       	ldi	r27, 0x42	; 66
    259a:	8b 87       	std	Y+11, r24	; 0x0b
    259c:	9c 87       	std	Y+12, r25	; 0x0c
    259e:	ad 87       	std	Y+13, r26	; 0x0d
    25a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a ef       	ldi	r20, 0xFA	; 250
    25b0:	54 e4       	ldi	r21, 0x44	; 68
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8f 83       	std	Y+7, r24	; 0x07
    25bc:	98 87       	std	Y+8, r25	; 0x08
    25be:	a9 87       	std	Y+9, r26	; 0x09
    25c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c2:	6f 81       	ldd	r22, Y+7	; 0x07
    25c4:	78 85       	ldd	r23, Y+8	; 0x08
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <StepperMotorCCW+0x400>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <StepperMotorCCW+0x47e>
	else if (__tmp > 65535)
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	4c f5       	brge	.+82     	; 0x264e <StepperMotorCCW+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2600:	8d 85       	ldd	r24, Y+13	; 0x0d
    2602:	9e 85       	ldd	r25, Y+14	; 0x0e
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e2       	ldi	r20, 0x20	; 32
    260a:	51 e4       	ldi	r21, 0x41	; 65
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <StepperMotorCCW+0x460>
    2626:	88 ec       	ldi	r24, 0xC8	; 200
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9c 83       	std	Y+4, r25	; 0x04
    262c:	8b 83       	std	Y+3, r24	; 0x03
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <StepperMotorCCW+0x44e>
    2636:	9c 83       	std	Y+4, r25	; 0x04
    2638:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	69 f7       	brne	.-38     	; 0x2626 <StepperMotorCCW+0x442>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <StepperMotorCCW+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	6f 81       	ldd	r22, Y+7	; 0x07
    2650:	78 85       	ldd	r23, Y+8	; 0x08
    2652:	89 85       	ldd	r24, Y+9	; 0x09
    2654:	9a 85       	ldd	r25, Y+10	; 0x0a
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <StepperMotorCCW+0x48a>
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01
	}

}
void StepperMotorCCW(u8 port, u8 pin_1, u8 pin_2, u8 pin_3, u8 pin_4, u8 angel) {
	u8 cycles = (angel / 10) / 4;
	for (int i = 0; i < cycles; i++) {
    2676:	89 ad       	ldd	r24, Y+57	; 0x39
    2678:	9a ad       	ldd	r25, Y+58	; 0x3a
    267a:	01 96       	adiw	r24, 0x01	; 1
    267c:	9a af       	std	Y+58, r25	; 0x3a
    267e:	89 af       	std	Y+57, r24	; 0x39
    2680:	8b ad       	ldd	r24, Y+59	; 0x3b
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	89 ad       	ldd	r24, Y+57	; 0x39
    2688:	9a ad       	ldd	r25, Y+58	; 0x3a
    268a:	82 17       	cp	r24, r18
    268c:	93 07       	cpc	r25, r19
    268e:	0c f4       	brge	.+2      	; 0x2692 <StepperMotorCCW+0x4ae>
    2690:	ce cd       	rjmp	.-1124   	; 0x222e <StepperMotorCCW+0x4a>
		SetPinVal(port, pin_4, PIN_LOW);
		_delay_ms(50);

	}

}
    2692:	cf 5b       	subi	r28, 0xBF	; 191
    2694:	df 4f       	sbci	r29, 0xFF	; 255
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	0f 91       	pop	r16
    26a6:	ef 90       	pop	r14
    26a8:	08 95       	ret

000026aa <initSensor>:
 *      Author: compu market
 */
#include"../../LIB/BIT_Math.h"
#include"../../LIB/Def_Types.h"
#include "../../MCAL/ADC/int.h"
void initSensor() {
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
	initADC();
    26b2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <initADC>

}
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <Sensor_Read>:
u16 Sensor_Read() {
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <Sensor_Read+0x6>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <Sensor_Read+0x8>
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <Sensor_Read+0xa>
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
	u16 steps = ADC_Read();
    26ca:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <ADC_Read>
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
	u16 volt = (steps * 5000.0) / 1024; //--> mv
    26d2:	8d 81       	ldd	r24, Y+5	; 0x05
    26d4:	9e 81       	ldd	r25, Y+6	; 0x06
    26d6:	cc 01       	movw	r24, r24
    26d8:	a0 e0       	ldi	r26, 0x00	; 0
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e4       	ldi	r19, 0x40	; 64
    26f0:	4c e9       	ldi	r20, 0x9C	; 156
    26f2:	55 e4       	ldi	r21, 0x45	; 69
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e8       	ldi	r20, 0x80	; 128
    2706:	54 e4       	ldi	r21, 0x44	; 68
    2708:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9c 83       	std	Y+4, r25	; 0x04
    271e:	8b 83       	std	Y+3, r24	; 0x03
	u16 Temp = volt / 10; //--> Sensor 10mv/C°
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	9c 81       	ldd	r25, Y+4	; 0x04
    2724:	2a e0       	ldi	r18, 0x0A	; 10
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	b9 01       	movw	r22, r18
    272a:	0e 94 38 1c 	call	0x3870	; 0x3870 <__udivmodhi4>
    272e:	cb 01       	movw	r24, r22
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
	return Temp;
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2738:	26 96       	adiw	r28, 0x06	; 6
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <initDCMotor>:
 *      Author: compu market
 */

#include "../../MCAL/DIO/int.h"
#include"../../LIB/Def_Types.h"
void initDCMotor(u8 port, u8 pin_1, u8 pin_2) {
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	00 d0       	rcall	.+0      	; 0x2750 <initDCMotor+0x6>
    2750:	0f 92       	push	r0
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	6a 83       	std	Y+2, r22	; 0x02
    275a:	4b 83       	std	Y+3, r20	; 0x03
	SetPinDir(port, pin_1, PIN_OUT);
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	6a 81       	ldd	r22, Y+2	; 0x02
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(port, pin_2, PIN_OUT);
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	6b 81       	ldd	r22, Y+3	; 0x03
    276a:	41 e0       	ldi	r20, 0x01	; 1
    276c:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>

}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <DCMotorCW>:
void DCMotorCW(u8 port, u8 pin_1, u8 pin_2)

{
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	00 d0       	rcall	.+0      	; 0x2782 <DCMotorCW+0x6>
    2782:	0f 92       	push	r0
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	6a 83       	std	Y+2, r22	; 0x02
    278c:	4b 83       	std	Y+3, r20	; 0x03
	SetPinVal(port, pin_1, PIN_HIGH);
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	6a 81       	ldd	r22, Y+2	; 0x02
    2792:	41 e0       	ldi	r20, 0x01	; 1
    2794:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	SetPinVal(port, pin_2, PIN_LOW);
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	6b 81       	ldd	r22, Y+3	; 0x03
    279c:	40 e0       	ldi	r20, 0x00	; 0
    279e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>

}
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	08 95       	ret

000027ae <DCMotorCCW>:
void DCMotorCCW(u8 port, u8 pin_1, u8 pin_2) {
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <DCMotorCCW+0x6>
    27b4:	0f 92       	push	r0
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	6a 83       	std	Y+2, r22	; 0x02
    27be:	4b 83       	std	Y+3, r20	; 0x03
	SetPinVal(port, pin_2, PIN_HIGH);
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	6b 81       	ldd	r22, Y+3	; 0x03
    27c4:	41 e0       	ldi	r20, 0x01	; 1
    27c6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	SetPinVal(port, pin_1, PIN_LOW);
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	6a 81       	ldd	r22, Y+2	; 0x02
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>

}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <getLen>:
#include "../../MCAL/DIO/int.h"
#include <avr/io.h>
#include <util/delay.h>
#include "int.h"
u8 arr[100];
u8 getLen(u32 x) {
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <getLen+0x6>
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <getLen+0x8>
    27e8:	0f 92       	push	r0
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	6a 83       	std	Y+2, r22	; 0x02
    27f0:	7b 83       	std	Y+3, r23	; 0x03
    27f2:	8c 83       	std	Y+4, r24	; 0x04
    27f4:	9d 83       	std	Y+5, r25	; 0x05
	u8 len = 0;
    27f6:	19 82       	std	Y+1, r1	; 0x01
	do {
		x /= 10;
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	9b 81       	ldd	r25, Y+3	; 0x03
    27fc:	ac 81       	ldd	r26, Y+4	; 0x04
    27fe:	bd 81       	ldd	r27, Y+5	; 0x05
    2800:	2a e0       	ldi	r18, 0x0A	; 10
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__udivmodsi4>
    2810:	da 01       	movw	r26, r20
    2812:	c9 01       	movw	r24, r18
    2814:	8a 83       	std	Y+2, r24	; 0x02
    2816:	9b 83       	std	Y+3, r25	; 0x03
    2818:	ac 83       	std	Y+4, r26	; 0x04
    281a:	bd 83       	std	Y+5, r27	; 0x05
		len++;
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	8f 5f       	subi	r24, 0xFF	; 255
    2820:	89 83       	std	Y+1, r24	; 0x01
	} while (x != 0);
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	9b 81       	ldd	r25, Y+3	; 0x03
    2826:	ac 81       	ldd	r26, Y+4	; 0x04
    2828:	bd 81       	ldd	r27, Y+5	; 0x05
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	a1 05       	cpc	r26, r1
    282e:	b1 05       	cpc	r27, r1
    2830:	19 f7       	brne	.-58     	; 0x27f8 <getLen+0x18>
	return len;
    2832:	89 81       	ldd	r24, Y+1	; 0x01
}
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <IntoString>:

void IntoString(u32 x) {
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	28 97       	sbiw	r28, 0x08	; 8
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	6d 83       	std	Y+5, r22	; 0x05
    285e:	7e 83       	std	Y+6, r23	; 0x06
    2860:	8f 83       	std	Y+7, r24	; 0x07
    2862:	98 87       	std	Y+8, r25	; 0x08
	int len = getLen(x);
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	af 81       	ldd	r26, Y+7	; 0x07
    286a:	b8 85       	ldd	r27, Y+8	; 0x08
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <getLen>
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    287c:	1a 82       	std	Y+2, r1	; 0x02
    287e:	19 82       	std	Y+1, r1	; 0x01
    2880:	35 c0       	rjmp	.+106    	; 0x28ec <IntoString+0xa8>
	while (x != 0) {
		//u8 dig = (u8) x % 10;
		arr[len - i - 1] = (u8) ('0' + x % 10);
    2882:	2b 81       	ldd	r18, Y+3	; 0x03
    2884:	3c 81       	ldd	r19, Y+4	; 0x04
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	a9 01       	movw	r20, r18
    288c:	48 1b       	sub	r20, r24
    288e:	59 0b       	sbc	r21, r25
    2890:	ca 01       	movw	r24, r20
    2892:	8c 01       	movw	r16, r24
    2894:	01 50       	subi	r16, 0x01	; 1
    2896:	10 40       	sbci	r17, 0x00	; 0
    2898:	8d 81       	ldd	r24, Y+5	; 0x05
    289a:	9e 81       	ldd	r25, Y+6	; 0x06
    289c:	af 81       	ldd	r26, Y+7	; 0x07
    289e:	b8 85       	ldd	r27, Y+8	; 0x08
    28a0:	2a e0       	ldi	r18, 0x0A	; 10
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	40 e0       	ldi	r20, 0x00	; 0
    28a6:	50 e0       	ldi	r21, 0x00	; 0
    28a8:	bc 01       	movw	r22, r24
    28aa:	cd 01       	movw	r24, r26
    28ac:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__udivmodsi4>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	80 5d       	subi	r24, 0xD0	; 208
    28b6:	f8 01       	movw	r30, r16
    28b8:	ec 57       	subi	r30, 0x7C	; 124
    28ba:	fe 4f       	sbci	r31, 0xFE	; 254
    28bc:	80 83       	st	Z, r24
		x /= 10;
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	af 81       	ldd	r26, Y+7	; 0x07
    28c4:	b8 85       	ldd	r27, Y+8	; 0x08
    28c6:	2a e0       	ldi	r18, 0x0A	; 10
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__udivmodsi4>
    28d6:	da 01       	movw	r26, r20
    28d8:	c9 01       	movw	r24, r18
    28da:	8d 83       	std	Y+5, r24	; 0x05
    28dc:	9e 83       	std	Y+6, r25	; 0x06
    28de:	af 83       	std	Y+7, r26	; 0x07
    28e0:	b8 87       	std	Y+8, r27	; 0x08
		i++;
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	9a 81       	ldd	r25, Y+2	; 0x02
    28e6:	01 96       	adiw	r24, 0x01	; 1
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01
}

void IntoString(u32 x) {
	int len = getLen(x);
	int i = 0;
	while (x != 0) {
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	af 81       	ldd	r26, Y+7	; 0x07
    28f2:	b8 85       	ldd	r27, Y+8	; 0x08
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	a1 05       	cpc	r26, r1
    28f8:	b1 05       	cpc	r27, r1
    28fa:	19 f6       	brne	.-122    	; 0x2882 <IntoString+0x3e>
		//u8 dig = (u8) x % 10;
		arr[len - i - 1] = (u8) ('0' + x % 10);
		x /= 10;
		i++;
	}
	arr[i] = '\0';
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2900:	fc 01       	movw	r30, r24
    2902:	ec 57       	subi	r30, 0x7C	; 124
    2904:	fe 4f       	sbci	r31, 0xFE	; 254
    2906:	10 82       	st	Z, r1

}
    2908:	28 96       	adiw	r28, 0x08	; 8
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	1f 91       	pop	r17
    291a:	0f 91       	pop	r16
    291c:	08 95       	ret

0000291e <LCD_Init>:
//Initialisation
void LCD_Init() {
    291e:	0f 93       	push	r16
    2920:	1f 93       	push	r17
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	c6 54       	subi	r28, 0x46	; 70
    292c:	d0 40       	sbci	r29, 0x00	; 0
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
	SetPortDir(LCD_DATA_PORT, PORT_OUT);
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	6f ef       	ldi	r22, 0xFF	; 255
    293c:	0e 94 92 09 	call	0x1324	; 0x1324 <SetPortDir>
	SetPinDir(LCD_CTRL_PORT, LCD_RS_PIN, PIN_OUT);
    2940:	83 e0       	ldi	r24, 0x03	; 3
    2942:	65 e0       	ldi	r22, 0x05	; 5
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	 SetPinDir(LCD_CTRL_PORT, LCD_RW_PIN, PIN_OUT);
    294a:	83 e0       	ldi	r24, 0x03	; 3
    294c:	66 e0       	ldi	r22, 0x06	; 6
    294e:	41 e0       	ldi	r20, 0x01	; 1
    2950:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(LCD_CTRL_PORT, LCD_En_PIN, PIN_OUT);
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	67 e0       	ldi	r22, 0x07	; 7
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
    295e:	fe 01       	movw	r30, r28
    2960:	ed 5b       	subi	r30, 0xBD	; 189
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 ef       	ldi	r26, 0xF0	; 240
    296a:	b1 e4       	ldi	r27, 0x41	; 65
    296c:	80 83       	st	Z, r24
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	a2 83       	std	Z+2, r26	; 0x02
    2972:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	8e 01       	movw	r16, r28
    2976:	01 5c       	subi	r16, 0xC1	; 193
    2978:	1f 4f       	sbci	r17, 0xFF	; 255
    297a:	fe 01       	movw	r30, r28
    297c:	ed 5b       	subi	r30, 0xBD	; 189
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	60 81       	ld	r22, Z
    2982:	71 81       	ldd	r23, Z+1	; 0x01
    2984:	82 81       	ldd	r24, Z+2	; 0x02
    2986:	93 81       	ldd	r25, Z+3	; 0x03
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a ef       	ldi	r20, 0xFA	; 250
    298e:	54 e4       	ldi	r21, 0x44	; 68
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	f8 01       	movw	r30, r16
    299a:	80 83       	st	Z, r24
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	a2 83       	std	Z+2, r26	; 0x02
    29a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29a2:	fe 01       	movw	r30, r28
    29a4:	ff 96       	adiw	r30, 0x3f	; 63
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e8       	ldi	r20, 0x80	; 128
    29b4:	5f e3       	ldi	r21, 0x3F	; 63
    29b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ba:	88 23       	and	r24, r24
    29bc:	2c f4       	brge	.+10     	; 0x29c8 <LCD_Init+0xaa>
		__ticks = 1;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	9e af       	std	Y+62, r25	; 0x3e
    29c4:	8d af       	std	Y+61, r24	; 0x3d
    29c6:	46 c0       	rjmp	.+140    	; 0x2a54 <LCD_Init+0x136>
	else if (__tmp > 65535)
    29c8:	fe 01       	movw	r30, r28
    29ca:	ff 96       	adiw	r30, 0x3f	; 63
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	3f ef       	ldi	r19, 0xFF	; 255
    29d8:	4f e7       	ldi	r20, 0x7F	; 127
    29da:	57 e4       	ldi	r21, 0x47	; 71
    29dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29e0:	18 16       	cp	r1, r24
    29e2:	64 f5       	brge	.+88     	; 0x2a3c <LCD_Init+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e4:	fe 01       	movw	r30, r28
    29e6:	ed 5b       	subi	r30, 0xBD	; 189
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e2       	ldi	r20, 0x20	; 32
    29f8:	51 e4       	ldi	r21, 0x41	; 65
    29fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	bc 01       	movw	r22, r24
    2a04:	cd 01       	movw	r24, r26
    2a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9e af       	std	Y+62, r25	; 0x3e
    2a10:	8d af       	std	Y+61, r24	; 0x3d
    2a12:	0f c0       	rjmp	.+30     	; 0x2a32 <LCD_Init+0x114>
    2a14:	88 ec       	ldi	r24, 0xC8	; 200
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9c af       	std	Y+60, r25	; 0x3c
    2a1a:	8b af       	std	Y+59, r24	; 0x3b
    2a1c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a1e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <LCD_Init+0x102>
    2a24:	9c af       	std	Y+60, r25	; 0x3c
    2a26:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a28:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	9e af       	std	Y+62, r25	; 0x3e
    2a30:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a32:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a34:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	69 f7       	brne	.-38     	; 0x2a14 <LCD_Init+0xf6>
    2a3a:	16 c0       	rjmp	.+44     	; 0x2a68 <LCD_Init+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ff 96       	adiw	r30, 0x3f	; 63
    2a40:	60 81       	ld	r22, Z
    2a42:	71 81       	ldd	r23, Z+1	; 0x01
    2a44:	82 81       	ldd	r24, Z+2	; 0x02
    2a46:	93 81       	ldd	r25, Z+3	; 0x03
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	9e af       	std	Y+62, r25	; 0x3e
    2a52:	8d af       	std	Y+61, r24	; 0x3d
    2a54:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a56:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a58:	9a af       	std	Y+58, r25	; 0x3a
    2a5a:	89 af       	std	Y+57, r24	; 0x39
    2a5c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a5e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <LCD_Init+0x142>
    2a64:	9a af       	std	Y+58, r25	; 0x3a
    2a66:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(30);
	LCD_SendCMD(0b00111100);
    2a68:	8c e3       	ldi	r24, 0x3C	; 60
    2a6a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_SendCMD>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a0 e8       	ldi	r26, 0x80	; 128
    2a74:	bf e3       	ldi	r27, 0x3F	; 63
    2a76:	8d ab       	std	Y+53, r24	; 0x35
    2a78:	9e ab       	std	Y+54, r25	; 0x36
    2a7a:	af ab       	std	Y+55, r26	; 0x37
    2a7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a80:	7e a9       	ldd	r23, Y+54	; 0x36
    2a82:	8f a9       	ldd	r24, Y+55	; 0x37
    2a84:	98 ad       	ldd	r25, Y+56	; 0x38
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	89 ab       	std	Y+49, r24	; 0x31
    2a98:	9a ab       	std	Y+50, r25	; 0x32
    2a9a:	ab ab       	std	Y+51, r26	; 0x33
    2a9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa0:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa2:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa4:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <LCD_Init+0x1a2>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	98 ab       	std	Y+48, r25	; 0x30
    2abc:	8f a7       	std	Y+47, r24	; 0x2f
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <LCD_Init+0x220>
	else if (__tmp > 65535)
    2ac0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ac2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ac4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <LCD_Init+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	6d a9       	ldd	r22, Y+53	; 0x35
    2ada:	7e a9       	ldd	r23, Y+54	; 0x36
    2adc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ade:	98 ad       	ldd	r25, Y+56	; 0x38
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	98 ab       	std	Y+48, r25	; 0x30
    2afe:	8f a7       	std	Y+47, r24	; 0x2f
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <LCD_Init+0x202>
    2b02:	88 ec       	ldi	r24, 0xC8	; 200
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9e a7       	std	Y+46, r25	; 0x2e
    2b08:	8d a7       	std	Y+45, r24	; 0x2d
    2b0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <LCD_Init+0x1f0>
    2b12:	9e a7       	std	Y+46, r25	; 0x2e
    2b14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b18:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	98 ab       	std	Y+48, r25	; 0x30
    2b1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b22:	98 a9       	ldd	r25, Y+48	; 0x30
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <LCD_Init+0x1e4>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <LCD_Init+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b30:	9c a9       	ldd	r25, Y+52	; 0x34
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	98 ab       	std	Y+48, r25	; 0x30
    2b3c:	8f a7       	std	Y+47, r24	; 0x2f
    2b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b40:	98 a9       	ldd	r25, Y+48	; 0x30
    2b42:	9c a7       	std	Y+44, r25	; 0x2c
    2b44:	8b a7       	std	Y+43, r24	; 0x2b
    2b46:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b48:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <LCD_Init+0x22c>
    2b4e:	9c a7       	std	Y+44, r25	; 0x2c
    2b50:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_SendCMD(0b00001111);
    2b52:	8f e0       	ldi	r24, 0x0F	; 15
    2b54:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_SendCMD>
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	a0 e8       	ldi	r26, 0x80	; 128
    2b5e:	bf e3       	ldi	r27, 0x3F	; 63
    2b60:	8f a3       	std	Y+39, r24	; 0x27
    2b62:	98 a7       	std	Y+40, r25	; 0x28
    2b64:	a9 a7       	std	Y+41, r26	; 0x29
    2b66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b68:	6f a1       	ldd	r22, Y+39	; 0x27
    2b6a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b6c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4a ef       	ldi	r20, 0xFA	; 250
    2b76:	54 e4       	ldi	r21, 0x44	; 68
    2b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	8b a3       	std	Y+35, r24	; 0x23
    2b82:	9c a3       	std	Y+36, r25	; 0x24
    2b84:	ad a3       	std	Y+37, r26	; 0x25
    2b86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b88:	6b a1       	ldd	r22, Y+35	; 0x23
    2b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e8       	ldi	r20, 0x80	; 128
    2b96:	5f e3       	ldi	r21, 0x3F	; 63
    2b98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b9c:	88 23       	and	r24, r24
    2b9e:	2c f4       	brge	.+10     	; 0x2baa <LCD_Init+0x28c>
		__ticks = 1;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9a a3       	std	Y+34, r25	; 0x22
    2ba6:	89 a3       	std	Y+33, r24	; 0x21
    2ba8:	3f c0       	rjmp	.+126    	; 0x2c28 <LCD_Init+0x30a>
	else if (__tmp > 65535)
    2baa:	6b a1       	ldd	r22, Y+35	; 0x23
    2bac:	7c a1       	ldd	r23, Y+36	; 0x24
    2bae:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	3f ef       	ldi	r19, 0xFF	; 255
    2bb6:	4f e7       	ldi	r20, 0x7F	; 127
    2bb8:	57 e4       	ldi	r21, 0x47	; 71
    2bba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bbe:	18 16       	cp	r1, r24
    2bc0:	4c f5       	brge	.+82     	; 0x2c14 <LCD_Init+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc4:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc6:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e2       	ldi	r20, 0x20	; 32
    2bd0:	51 e4       	ldi	r21, 0x41	; 65
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	bc 01       	movw	r22, r24
    2bdc:	cd 01       	movw	r24, r26
    2bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	9a a3       	std	Y+34, r25	; 0x22
    2be8:	89 a3       	std	Y+33, r24	; 0x21
    2bea:	0f c0       	rjmp	.+30     	; 0x2c0a <LCD_Init+0x2ec>
    2bec:	88 ec       	ldi	r24, 0xC8	; 200
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	98 a3       	std	Y+32, r25	; 0x20
    2bf2:	8f 8f       	std	Y+31, r24	; 0x1f
    2bf4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bf6:	98 a1       	ldd	r25, Y+32	; 0x20
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <LCD_Init+0x2da>
    2bfc:	98 a3       	std	Y+32, r25	; 0x20
    2bfe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c00:	89 a1       	ldd	r24, Y+33	; 0x21
    2c02:	9a a1       	ldd	r25, Y+34	; 0x22
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	9a a3       	std	Y+34, r25	; 0x22
    2c08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	69 f7       	brne	.-38     	; 0x2bec <LCD_Init+0x2ce>
    2c12:	14 c0       	rjmp	.+40     	; 0x2c3c <LCD_Init+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c14:	6b a1       	ldd	r22, Y+35	; 0x23
    2c16:	7c a1       	ldd	r23, Y+36	; 0x24
    2c18:	8d a1       	ldd	r24, Y+37	; 0x25
    2c1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	9a a3       	std	Y+34, r25	; 0x22
    2c26:	89 a3       	std	Y+33, r24	; 0x21
    2c28:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c2c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c2e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <LCD_Init+0x316>
    2c38:	9e 8f       	std	Y+30, r25	; 0x1e
    2c3a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_SendCMD(0b00000001);
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_SendCMD>
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	a0 e0       	ldi	r26, 0x00	; 0
    2c48:	b0 e4       	ldi	r27, 0x40	; 64
    2c4a:	89 8f       	std	Y+25, r24	; 0x19
    2c4c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c4e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c52:	69 8d       	ldd	r22, Y+25	; 0x19
    2c54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	4a ef       	ldi	r20, 0xFA	; 250
    2c60:	54 e4       	ldi	r21, 0x44	; 68
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	8d 8b       	std	Y+21, r24	; 0x15
    2c6c:	9e 8b       	std	Y+22, r25	; 0x16
    2c6e:	af 8b       	std	Y+23, r26	; 0x17
    2c70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c72:	6d 89       	ldd	r22, Y+21	; 0x15
    2c74:	7e 89       	ldd	r23, Y+22	; 0x16
    2c76:	8f 89       	ldd	r24, Y+23	; 0x17
    2c78:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e8       	ldi	r20, 0x80	; 128
    2c80:	5f e3       	ldi	r21, 0x3F	; 63
    2c82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c86:	88 23       	and	r24, r24
    2c88:	2c f4       	brge	.+10     	; 0x2c94 <LCD_Init+0x376>
		__ticks = 1;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	9c 8b       	std	Y+20, r25	; 0x14
    2c90:	8b 8b       	std	Y+19, r24	; 0x13
    2c92:	3f c0       	rjmp	.+126    	; 0x2d12 <LCD_Init+0x3f4>
	else if (__tmp > 65535)
    2c94:	6d 89       	ldd	r22, Y+21	; 0x15
    2c96:	7e 89       	ldd	r23, Y+22	; 0x16
    2c98:	8f 89       	ldd	r24, Y+23	; 0x17
    2c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ca0:	4f e7       	ldi	r20, 0x7F	; 127
    2ca2:	57 e4       	ldi	r21, 0x47	; 71
    2ca4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca8:	18 16       	cp	r1, r24
    2caa:	4c f5       	brge	.+82     	; 0x2cfe <LCD_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cac:	69 8d       	ldd	r22, Y+25	; 0x19
    2cae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	51 e4       	ldi	r21, 0x41	; 65
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	9c 8b       	std	Y+20, r25	; 0x14
    2cd2:	8b 8b       	std	Y+19, r24	; 0x13
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <LCD_Init+0x3d6>
    2cd6:	88 ec       	ldi	r24, 0xC8	; 200
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	9a 8b       	std	Y+18, r25	; 0x12
    2cdc:	89 8b       	std	Y+17, r24	; 0x11
    2cde:	89 89       	ldd	r24, Y+17	; 0x11
    2ce0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <LCD_Init+0x3c4>
    2ce6:	9a 8b       	std	Y+18, r25	; 0x12
    2ce8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cea:	8b 89       	ldd	r24, Y+19	; 0x13
    2cec:	9c 89       	ldd	r25, Y+20	; 0x14
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	9c 8b       	std	Y+20, r25	; 0x14
    2cf2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	69 f7       	brne	.-38     	; 0x2cd6 <LCD_Init+0x3b8>
    2cfc:	14 c0       	rjmp	.+40     	; 0x2d26 <LCD_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2d00:	7e 89       	ldd	r23, Y+22	; 0x16
    2d02:	8f 89       	ldd	r24, Y+23	; 0x17
    2d04:	98 8d       	ldd	r25, Y+24	; 0x18
    2d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	9c 8b       	std	Y+20, r25	; 0x14
    2d10:	8b 8b       	std	Y+19, r24	; 0x13
    2d12:	8b 89       	ldd	r24, Y+19	; 0x13
    2d14:	9c 89       	ldd	r25, Y+20	; 0x14
    2d16:	98 8b       	std	Y+16, r25	; 0x10
    2d18:	8f 87       	std	Y+15, r24	; 0x0f
    2d1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d1c:	98 89       	ldd	r25, Y+16	; 0x10
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <LCD_Init+0x400>
    2d22:	98 8b       	std	Y+16, r25	; 0x10
    2d24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_SendCMD(0b00000011);
    2d26:	83 e0       	ldi	r24, 0x03	; 3
    2d28:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_SendCMD>
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	a0 e0       	ldi	r26, 0x00	; 0
    2d32:	b0 e4       	ldi	r27, 0x40	; 64
    2d34:	8b 87       	std	Y+11, r24	; 0x0b
    2d36:	9c 87       	std	Y+12, r25	; 0x0c
    2d38:	ad 87       	std	Y+13, r26	; 0x0d
    2d3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	4a ef       	ldi	r20, 0xFA	; 250
    2d4a:	54 e4       	ldi	r21, 0x44	; 68
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	8f 83       	std	Y+7, r24	; 0x07
    2d56:	98 87       	std	Y+8, r25	; 0x08
    2d58:	a9 87       	std	Y+9, r26	; 0x09
    2d5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5e:	78 85       	ldd	r23, Y+8	; 0x08
    2d60:	89 85       	ldd	r24, Y+9	; 0x09
    2d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e8       	ldi	r20, 0x80	; 128
    2d6a:	5f e3       	ldi	r21, 0x3F	; 63
    2d6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d70:	88 23       	and	r24, r24
    2d72:	2c f4       	brge	.+10     	; 0x2d7e <LCD_Init+0x460>
		__ticks = 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9e 83       	std	Y+6, r25	; 0x06
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
    2d7c:	3f c0       	rjmp	.+126    	; 0x2dfc <LCD_Init+0x4de>
	else if (__tmp > 65535)
    2d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d80:	78 85       	ldd	r23, Y+8	; 0x08
    2d82:	89 85       	ldd	r24, Y+9	; 0x09
    2d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	3f ef       	ldi	r19, 0xFF	; 255
    2d8a:	4f e7       	ldi	r20, 0x7F	; 127
    2d8c:	57 e4       	ldi	r21, 0x47	; 71
    2d8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d92:	18 16       	cp	r1, r24
    2d94:	4c f5       	brge	.+82     	; 0x2de8 <LCD_Init+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e2       	ldi	r20, 0x20	; 32
    2da4:	51 e4       	ldi	r21, 0x41	; 65
    2da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	bc 01       	movw	r22, r24
    2db0:	cd 01       	movw	r24, r26
    2db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
    2dbe:	0f c0       	rjmp	.+30     	; 0x2dde <LCD_Init+0x4c0>
    2dc0:	88 ec       	ldi	r24, 0xC8	; 200
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	9c 83       	std	Y+4, r25	; 0x04
    2dc6:	8b 83       	std	Y+3, r24	; 0x03
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	9c 81       	ldd	r25, Y+4	; 0x04
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <LCD_Init+0x4ae>
    2dd0:	9c 83       	std	Y+4, r25	; 0x04
    2dd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	9e 83       	std	Y+6, r25	; 0x06
    2ddc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	00 97       	sbiw	r24, 0x00	; 0
    2de4:	69 f7       	brne	.-38     	; 0x2dc0 <LCD_Init+0x4a2>
    2de6:	14 c0       	rjmp	.+40     	; 0x2e10 <LCD_Init+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	9a 83       	std	Y+2, r25	; 0x02
    2e02:	89 83       	std	Y+1, r24	; 0x01
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	9a 81       	ldd	r25, Y+2	; 0x02
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <LCD_Init+0x4ea>
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    2e10:	ca 5b       	subi	r28, 0xBA	; 186
    2e12:	df 4f       	sbci	r29, 0xFF	; 255
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	1f 91       	pop	r17
    2e24:	0f 91       	pop	r16
    2e26:	08 95       	ret

00002e28 <LCD_SendCMD>:
//Send Command
void LCD_SendCMD(u8 cmd) {
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	6d 97       	sbiw	r28, 0x1d	; 29
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	8d 8f       	std	Y+29, r24	; 0x1d

	//set rs to send command
	SetPinVal(LCD_CTRL_PORT, LCD_RS_PIN, PIN_LOW);
    2e3e:	83 e0       	ldi	r24, 0x03	; 3
    2e40:	65 e0       	ldi	r22, 0x05	; 5
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	//set rw to write
	SetPinVal(LCD_CTRL_PORT, LCD_RW_PIN, PIN_LOW);
    2e48:	83 e0       	ldi	r24, 0x03	; 3
    2e4a:	66 e0       	ldi	r22, 0x06	; 6
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	SetPortVal(LCD_DATA_PORT, cmd);
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2e56:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <SetPortVal>
	SetPinVal(LCD_CTRL_PORT, LCD_En_PIN, PIN_HIGH);
    2e5a:	83 e0       	ldi	r24, 0x03	; 3
    2e5c:	67 e0       	ldi	r22, 0x07	; 7
    2e5e:	41 e0       	ldi	r20, 0x01	; 1
    2e60:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	a0 e8       	ldi	r26, 0x80	; 128
    2e6a:	bf e3       	ldi	r27, 0x3F	; 63
    2e6c:	89 8f       	std	Y+25, r24	; 0x19
    2e6e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e70:	ab 8f       	std	Y+27, r26	; 0x1b
    2e72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e74:	69 8d       	ldd	r22, Y+25	; 0x19
    2e76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	4a ef       	ldi	r20, 0xFA	; 250
    2e82:	54 e4       	ldi	r21, 0x44	; 68
    2e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	8d 8b       	std	Y+21, r24	; 0x15
    2e8e:	9e 8b       	std	Y+22, r25	; 0x16
    2e90:	af 8b       	std	Y+23, r26	; 0x17
    2e92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e94:	6d 89       	ldd	r22, Y+21	; 0x15
    2e96:	7e 89       	ldd	r23, Y+22	; 0x16
    2e98:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	5f e3       	ldi	r21, 0x3F	; 63
    2ea4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea8:	88 23       	and	r24, r24
    2eaa:	2c f4       	brge	.+10     	; 0x2eb6 <LCD_SendCMD+0x8e>
		__ticks = 1;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	9c 8b       	std	Y+20, r25	; 0x14
    2eb2:	8b 8b       	std	Y+19, r24	; 0x13
    2eb4:	3f c0       	rjmp	.+126    	; 0x2f34 <LCD_SendCMD+0x10c>
	else if (__tmp > 65535)
    2eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eba:	8f 89       	ldd	r24, Y+23	; 0x17
    2ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	3f ef       	ldi	r19, 0xFF	; 255
    2ec2:	4f e7       	ldi	r20, 0x7F	; 127
    2ec4:	57 e4       	ldi	r21, 0x47	; 71
    2ec6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eca:	18 16       	cp	r1, r24
    2ecc:	4c f5       	brge	.+82     	; 0x2f20 <LCD_SendCMD+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ece:	69 8d       	ldd	r22, Y+25	; 0x19
    2ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e2       	ldi	r20, 0x20	; 32
    2edc:	51 e4       	ldi	r21, 0x41	; 65
    2ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	9c 8b       	std	Y+20, r25	; 0x14
    2ef4:	8b 8b       	std	Y+19, r24	; 0x13
    2ef6:	0f c0       	rjmp	.+30     	; 0x2f16 <LCD_SendCMD+0xee>
    2ef8:	88 ec       	ldi	r24, 0xC8	; 200
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	9a 8b       	std	Y+18, r25	; 0x12
    2efe:	89 8b       	std	Y+17, r24	; 0x11
    2f00:	89 89       	ldd	r24, Y+17	; 0x11
    2f02:	9a 89       	ldd	r25, Y+18	; 0x12
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <LCD_SendCMD+0xdc>
    2f08:	9a 8b       	std	Y+18, r25	; 0x12
    2f0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	9c 8b       	std	Y+20, r25	; 0x14
    2f14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f16:	8b 89       	ldd	r24, Y+19	; 0x13
    2f18:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	69 f7       	brne	.-38     	; 0x2ef8 <LCD_SendCMD+0xd0>
    2f1e:	14 c0       	rjmp	.+40     	; 0x2f48 <LCD_SendCMD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f20:	6d 89       	ldd	r22, Y+21	; 0x15
    2f22:	7e 89       	ldd	r23, Y+22	; 0x16
    2f24:	8f 89       	ldd	r24, Y+23	; 0x17
    2f26:	98 8d       	ldd	r25, Y+24	; 0x18
    2f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	9c 8b       	std	Y+20, r25	; 0x14
    2f32:	8b 8b       	std	Y+19, r24	; 0x13
    2f34:	8b 89       	ldd	r24, Y+19	; 0x13
    2f36:	9c 89       	ldd	r25, Y+20	; 0x14
    2f38:	98 8b       	std	Y+16, r25	; 0x10
    2f3a:	8f 87       	std	Y+15, r24	; 0x0f
    2f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f3e:	98 89       	ldd	r25, Y+16	; 0x10
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	f1 f7       	brne	.-4      	; 0x2f40 <LCD_SendCMD+0x118>
    2f44:	98 8b       	std	Y+16, r25	; 0x10
    2f46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	SetPinVal(LCD_CTRL_PORT, LCD_En_PIN, PIN_LOW);
    2f48:	83 e0       	ldi	r24, 0x03	; 3
    2f4a:	67 e0       	ldi	r22, 0x07	; 7
    2f4c:	40 e0       	ldi	r20, 0x00	; 0
    2f4e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a0 e8       	ldi	r26, 0x80	; 128
    2f58:	bf e3       	ldi	r27, 0x3F	; 63
    2f5a:	8b 87       	std	Y+11, r24	; 0x0b
    2f5c:	9c 87       	std	Y+12, r25	; 0x0c
    2f5e:	ad 87       	std	Y+13, r26	; 0x0d
    2f60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	4a ef       	ldi	r20, 0xFA	; 250
    2f70:	54 e4       	ldi	r21, 0x44	; 68
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	8f 83       	std	Y+7, r24	; 0x07
    2f7c:	98 87       	std	Y+8, r25	; 0x08
    2f7e:	a9 87       	std	Y+9, r26	; 0x09
    2f80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f82:	6f 81       	ldd	r22, Y+7	; 0x07
    2f84:	78 85       	ldd	r23, Y+8	; 0x08
    2f86:	89 85       	ldd	r24, Y+9	; 0x09
    2f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	5f e3       	ldi	r21, 0x3F	; 63
    2f92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f96:	88 23       	and	r24, r24
    2f98:	2c f4       	brge	.+10     	; 0x2fa4 <LCD_SendCMD+0x17c>
		__ticks = 1;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
    2fa2:	3f c0       	rjmp	.+126    	; 0x3022 <LCD_SendCMD+0x1fa>
	else if (__tmp > 65535)
    2fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa6:	78 85       	ldd	r23, Y+8	; 0x08
    2fa8:	89 85       	ldd	r24, Y+9	; 0x09
    2faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	3f ef       	ldi	r19, 0xFF	; 255
    2fb0:	4f e7       	ldi	r20, 0x7F	; 127
    2fb2:	57 e4       	ldi	r21, 0x47	; 71
    2fb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fb8:	18 16       	cp	r1, r24
    2fba:	4c f5       	brge	.+82     	; 0x300e <LCD_SendCMD+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e2       	ldi	r20, 0x20	; 32
    2fca:	51 e4       	ldi	r21, 0x41	; 65
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	9e 83       	std	Y+6, r25	; 0x06
    2fe2:	8d 83       	std	Y+5, r24	; 0x05
    2fe4:	0f c0       	rjmp	.+30     	; 0x3004 <LCD_SendCMD+0x1dc>
    2fe6:	88 ec       	ldi	r24, 0xC8	; 200
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9c 83       	std	Y+4, r25	; 0x04
    2fec:	8b 83       	std	Y+3, r24	; 0x03
    2fee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <LCD_SendCMD+0x1ca>
    2ff6:	9c 83       	std	Y+4, r25	; 0x04
    2ff8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	9e 83       	std	Y+6, r25	; 0x06
    3002:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	69 f7       	brne	.-38     	; 0x2fe6 <LCD_SendCMD+0x1be>
    300c:	14 c0       	rjmp	.+40     	; 0x3036 <LCD_SendCMD+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300e:	6f 81       	ldd	r22, Y+7	; 0x07
    3010:	78 85       	ldd	r23, Y+8	; 0x08
    3012:	89 85       	ldd	r24, Y+9	; 0x09
    3014:	9a 85       	ldd	r25, Y+10	; 0x0a
    3016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	9e 83       	std	Y+6, r25	; 0x06
    3020:	8d 83       	std	Y+5, r24	; 0x05
    3022:	8d 81       	ldd	r24, Y+5	; 0x05
    3024:	9e 81       	ldd	r25, Y+6	; 0x06
    3026:	9a 83       	std	Y+2, r25	; 0x02
    3028:	89 83       	std	Y+1, r24	; 0x01
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	9a 81       	ldd	r25, Y+2	; 0x02
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <LCD_SendCMD+0x206>
    3032:	9a 83       	std	Y+2, r25	; 0x02
    3034:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3036:	6d 96       	adiw	r28, 0x1d	; 29
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	cf 91       	pop	r28
    3044:	df 91       	pop	r29
    3046:	08 95       	ret

00003048 <LCD_WriteChar>:
// Send Character
void LCD_WriteChar(u8 Char) {
    3048:	df 93       	push	r29
    304a:	cf 93       	push	r28
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	2f 97       	sbiw	r28, 0x0f	; 15
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	8f 87       	std	Y+15, r24	; 0x0f
	//set rs to send Data
	SetPinVal(LCD_CTRL_PORT, LCD_RS_PIN, PIN_HIGH);
    305e:	83 e0       	ldi	r24, 0x03	; 3
    3060:	65 e0       	ldi	r22, 0x05	; 5
    3062:	41 e0       	ldi	r20, 0x01	; 1
    3064:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	//set rw to write
	SetPinVal(LCD_CTRL_PORT, LCD_RW_PIN, PIN_LOW);
    3068:	83 e0       	ldi	r24, 0x03	; 3
    306a:	66 e0       	ldi	r22, 0x06	; 6
    306c:	40 e0       	ldi	r20, 0x00	; 0
    306e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	SetPortVal(LCD_DATA_PORT, Char);
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	6f 85       	ldd	r22, Y+15	; 0x0f
    3076:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <SetPortVal>
	SetPinVal(LCD_CTRL_PORT, LCD_En_PIN, PIN_HIGH);
    307a:	83 e0       	ldi	r24, 0x03	; 3
    307c:	67 e0       	ldi	r22, 0x07	; 7
    307e:	41 e0       	ldi	r20, 0x01	; 1
    3080:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	a0 e8       	ldi	r26, 0x80	; 128
    308a:	bf e3       	ldi	r27, 0x3F	; 63
    308c:	8b 87       	std	Y+11, r24	; 0x0b
    308e:	9c 87       	std	Y+12, r25	; 0x0c
    3090:	ad 87       	std	Y+13, r26	; 0x0d
    3092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3094:	6b 85       	ldd	r22, Y+11	; 0x0b
    3096:	7c 85       	ldd	r23, Y+12	; 0x0c
    3098:	8d 85       	ldd	r24, Y+13	; 0x0d
    309a:	9e 85       	ldd	r25, Y+14	; 0x0e
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	4a ef       	ldi	r20, 0xFA	; 250
    30a2:	54 e4       	ldi	r21, 0x44	; 68
    30a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	8f 83       	std	Y+7, r24	; 0x07
    30ae:	98 87       	std	Y+8, r25	; 0x08
    30b0:	a9 87       	std	Y+9, r26	; 0x09
    30b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30b4:	6f 81       	ldd	r22, Y+7	; 0x07
    30b6:	78 85       	ldd	r23, Y+8	; 0x08
    30b8:	89 85       	ldd	r24, Y+9	; 0x09
    30ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e8       	ldi	r20, 0x80	; 128
    30c2:	5f e3       	ldi	r21, 0x3F	; 63
    30c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c8:	88 23       	and	r24, r24
    30ca:	2c f4       	brge	.+10     	; 0x30d6 <LCD_WriteChar+0x8e>
		__ticks = 1;
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9e 83       	std	Y+6, r25	; 0x06
    30d2:	8d 83       	std	Y+5, r24	; 0x05
    30d4:	3f c0       	rjmp	.+126    	; 0x3154 <LCD_WriteChar+0x10c>
	else if (__tmp > 65535)
    30d6:	6f 81       	ldd	r22, Y+7	; 0x07
    30d8:	78 85       	ldd	r23, Y+8	; 0x08
    30da:	89 85       	ldd	r24, Y+9	; 0x09
    30dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	3f ef       	ldi	r19, 0xFF	; 255
    30e2:	4f e7       	ldi	r20, 0x7F	; 127
    30e4:	57 e4       	ldi	r21, 0x47	; 71
    30e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	4c f5       	brge	.+82     	; 0x3140 <LCD_WriteChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e2       	ldi	r20, 0x20	; 32
    30fc:	51 e4       	ldi	r21, 0x41	; 65
    30fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	bc 01       	movw	r22, r24
    3108:	cd 01       	movw	r24, r26
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9e 83       	std	Y+6, r25	; 0x06
    3114:	8d 83       	std	Y+5, r24	; 0x05
    3116:	0f c0       	rjmp	.+30     	; 0x3136 <LCD_WriteChar+0xee>
    3118:	88 ec       	ldi	r24, 0xC8	; 200
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9c 83       	std	Y+4, r25	; 0x04
    311e:	8b 83       	std	Y+3, r24	; 0x03
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	9c 81       	ldd	r25, Y+4	; 0x04
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <LCD_WriteChar+0xdc>
    3128:	9c 83       	std	Y+4, r25	; 0x04
    312a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312c:	8d 81       	ldd	r24, Y+5	; 0x05
    312e:	9e 81       	ldd	r25, Y+6	; 0x06
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	9e 83       	std	Y+6, r25	; 0x06
    3134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3136:	8d 81       	ldd	r24, Y+5	; 0x05
    3138:	9e 81       	ldd	r25, Y+6	; 0x06
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	69 f7       	brne	.-38     	; 0x3118 <LCD_WriteChar+0xd0>
    313e:	14 c0       	rjmp	.+40     	; 0x3168 <LCD_WriteChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3140:	6f 81       	ldd	r22, Y+7	; 0x07
    3142:	78 85       	ldd	r23, Y+8	; 0x08
    3144:	89 85       	ldd	r24, Y+9	; 0x09
    3146:	9a 85       	ldd	r25, Y+10	; 0x0a
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9e 83       	std	Y+6, r25	; 0x06
    3152:	8d 83       	std	Y+5, r24	; 0x05
    3154:	8d 81       	ldd	r24, Y+5	; 0x05
    3156:	9e 81       	ldd	r25, Y+6	; 0x06
    3158:	9a 83       	std	Y+2, r25	; 0x02
    315a:	89 83       	std	Y+1, r24	; 0x01
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	f1 f7       	brne	.-4      	; 0x3160 <LCD_WriteChar+0x118>
    3164:	9a 83       	std	Y+2, r25	; 0x02
    3166:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	SetPinVal(LCD_CTRL_PORT, LCD_En_PIN, PIN_LOW);
    3168:	83 e0       	ldi	r24, 0x03	; 3
    316a:	67 e0       	ldi	r22, 0x07	; 7
    316c:	40 e0       	ldi	r20, 0x00	; 0
    316e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>

}
    3172:	2f 96       	adiw	r28, 0x0f	; 15
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	cd bf       	out	0x3d, r28	; 61
    317e:	cf 91       	pop	r28
    3180:	df 91       	pop	r29
    3182:	08 95       	ret

00003184 <LCD_WriteString>:
void LCD_WriteString(u8 *str) {
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	00 d0       	rcall	.+0      	; 0x318a <LCD_WriteString+0x6>
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	9a 83       	std	Y+2, r25	; 0x02
    3190:	89 83       	std	Y+1, r24	; 0x01
    3192:	0a c0       	rjmp	.+20     	; 0x31a8 <LCD_WriteString+0x24>
	while (*str != '\0') {
		LCD_WriteChar(*str);
    3194:	e9 81       	ldd	r30, Y+1	; 0x01
    3196:	fa 81       	ldd	r31, Y+2	; 0x02
    3198:	80 81       	ld	r24, Z
    319a:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_WriteChar>
		str++;
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	9a 81       	ldd	r25, Y+2	; 0x02
    31a2:	01 96       	adiw	r24, 0x01	; 1
    31a4:	9a 83       	std	Y+2, r25	; 0x02
    31a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	SetPinVal(LCD_CTRL_PORT, LCD_En_PIN, PIN_LOW);

}
void LCD_WriteString(u8 *str) {
	while (*str != '\0') {
    31a8:	e9 81       	ldd	r30, Y+1	; 0x01
    31aa:	fa 81       	ldd	r31, Y+2	; 0x02
    31ac:	80 81       	ld	r24, Z
    31ae:	88 23       	and	r24, r24
    31b0:	89 f7       	brne	.-30     	; 0x3194 <LCD_WriteString+0x10>
		LCD_WriteChar(*str);
		str++;
	}
}
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	cf 91       	pop	r28
    31b8:	df 91       	pop	r29
    31ba:	08 95       	ret

000031bc <LCD_WriteNum>:
void LCD_WriteNum(u32 num) {
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	00 d0       	rcall	.+0      	; 0x31c2 <LCD_WriteNum+0x6>
    31c2:	00 d0       	rcall	.+0      	; 0x31c4 <LCD_WriteNum+0x8>
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	69 83       	std	Y+1, r22	; 0x01
    31ca:	7a 83       	std	Y+2, r23	; 0x02
    31cc:	8b 83       	std	Y+3, r24	; 0x03
    31ce:	9c 83       	std	Y+4, r25	; 0x04
	IntoString(num);
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	9a 81       	ldd	r25, Y+2	; 0x02
    31d4:	ab 81       	ldd	r26, Y+3	; 0x03
    31d6:	bc 81       	ldd	r27, Y+4	; 0x04
    31d8:	bc 01       	movw	r22, r24
    31da:	cd 01       	movw	r24, r26
    31dc:	0e 94 22 14 	call	0x2844	; 0x2844 <IntoString>
	LCD_WriteString(arr);
    31e0:	84 e8       	ldi	r24, 0x84	; 132
    31e2:	91 e0       	ldi	r25, 0x01	; 1
    31e4:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_WriteString>
}
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <LCD_Clear>:
void LCD_Clear(void) {
    31f6:	df 93       	push	r29
    31f8:	cf 93       	push	r28
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCMD(0b00000001);
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_SendCMD>
}
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <LCD_GoTO>:
void LCD_GoTO(u8 row, u8 clm) {
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	00 d0       	rcall	.+0      	; 0x3210 <LCD_GoTO+0x6>
    3210:	00 d0       	rcall	.+0      	; 0x3212 <LCD_GoTO+0x8>
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	28 2f       	mov	r18, r24
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	3c 83       	std	Y+4, r19	; 0x04
    3222:	2b 83       	std	Y+3, r18	; 0x03
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	9c 81       	ldd	r25, Y+4	; 0x04
    3228:	81 30       	cpi	r24, 0x01	; 1
    322a:	91 05       	cpc	r25, r1
    322c:	31 f0       	breq	.+12     	; 0x323a <LCD_GoTO+0x30>
    322e:	2b 81       	ldd	r18, Y+3	; 0x03
    3230:	3c 81       	ldd	r19, Y+4	; 0x04
    3232:	22 30       	cpi	r18, 0x02	; 2
    3234:	31 05       	cpc	r19, r1
    3236:	31 f0       	breq	.+12     	; 0x3244 <LCD_GoTO+0x3a>
    3238:	09 c0       	rjmp	.+18     	; 0x324c <LCD_GoTO+0x42>
	case 1:
		LCD_SendCMD(128 + clm);
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	80 58       	subi	r24, 0x80	; 128
    323e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_SendCMD>
    3242:	04 c0       	rjmp	.+8      	; 0x324c <LCD_GoTO+0x42>
		break;
	case 2:
		LCD_SendCMD(192 + clm);
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	80 54       	subi	r24, 0x40	; 64
    3248:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_SendCMD>
		break;
	}
}
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	08 95       	ret

0000325a <KeypadInit>:
#include "int.h"

const u8 Keys[4][4] = { { '7', '8', '9', '/' }, { '4', '5', '6', '*' }, { '1',
		'2', '3', '-' }, { 'n', '0', '=', '+' } };

void KeypadInit() {
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62

	//Set Column
	SetPinDir(Keypad_Port, Keypad_Col0, PIN_OUT);
    3262:	82 e0       	ldi	r24, 0x02	; 2
    3264:	64 e0       	ldi	r22, 0x04	; 4
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(Keypad_Port, Keypad_Col1, PIN_OUT);
    326c:	82 e0       	ldi	r24, 0x02	; 2
    326e:	65 e0       	ldi	r22, 0x05	; 5
    3270:	41 e0       	ldi	r20, 0x01	; 1
    3272:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(Keypad_Port, Keypad_Col2, PIN_OUT);
    3276:	82 e0       	ldi	r24, 0x02	; 2
    3278:	66 e0       	ldi	r22, 0x06	; 6
    327a:	41 e0       	ldi	r20, 0x01	; 1
    327c:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(Keypad_Port, Keypad_Col3, PIN_OUT);
    3280:	82 e0       	ldi	r24, 0x02	; 2
    3282:	67 e0       	ldi	r22, 0x07	; 7
    3284:	41 e0       	ldi	r20, 0x01	; 1
    3286:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	//SetPortDir(Keypad_Port, PIN_OUT);

	SetPinVal(Keypad_Port, Keypad_Col0, PIN_HIGH);
    328a:	82 e0       	ldi	r24, 0x02	; 2
    328c:	64 e0       	ldi	r22, 0x04	; 4
    328e:	41 e0       	ldi	r20, 0x01	; 1
    3290:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	SetPinVal(Keypad_Port, Keypad_Col1, PIN_HIGH);
    3294:	82 e0       	ldi	r24, 0x02	; 2
    3296:	65 e0       	ldi	r22, 0x05	; 5
    3298:	41 e0       	ldi	r20, 0x01	; 1
    329a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	SetPinVal(Keypad_Port, Keypad_Col2, PIN_HIGH);
    329e:	82 e0       	ldi	r24, 0x02	; 2
    32a0:	66 e0       	ldi	r22, 0x06	; 6
    32a2:	41 e0       	ldi	r20, 0x01	; 1
    32a4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	SetPinVal(Keypad_Port, Keypad_Col3, PIN_HIGH);
    32a8:	82 e0       	ldi	r24, 0x02	; 2
    32aa:	67 e0       	ldi	r22, 0x07	; 7
    32ac:	41 e0       	ldi	r20, 0x01	; 1
    32ae:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	//Set Row
	SetPinDir(Keypad_Port, Keypad_Row0, PIN_IN);
    32b2:	82 e0       	ldi	r24, 0x02	; 2
    32b4:	60 e0       	ldi	r22, 0x00	; 0
    32b6:	40 e0       	ldi	r20, 0x00	; 0
    32b8:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(Keypad_Port, Keypad_Row1, PIN_IN);
    32bc:	82 e0       	ldi	r24, 0x02	; 2
    32be:	61 e0       	ldi	r22, 0x01	; 1
    32c0:	40 e0       	ldi	r20, 0x00	; 0
    32c2:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(Keypad_Port, Keypad_Row2, PIN_IN);
    32c6:	82 e0       	ldi	r24, 0x02	; 2
    32c8:	62 e0       	ldi	r22, 0x02	; 2
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(Keypad_Port, Keypad_Row3, PIN_IN);
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	63 e0       	ldi	r22, 0x03	; 3
    32d4:	40 e0       	ldi	r20, 0x00	; 0
    32d6:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>

	DIO_PullUp(Keypad_Port, Keypad_Row0);
    32da:	82 e0       	ldi	r24, 0x02	; 2
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <DIO_PullUp>
	DIO_PullUp(Keypad_Port, Keypad_Row1);
    32e2:	82 e0       	ldi	r24, 0x02	; 2
    32e4:	61 e0       	ldi	r22, 0x01	; 1
    32e6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <DIO_PullUp>
	DIO_PullUp(Keypad_Port, Keypad_Row2);
    32ea:	82 e0       	ldi	r24, 0x02	; 2
    32ec:	62 e0       	ldi	r22, 0x02	; 2
    32ee:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <DIO_PullUp>
	DIO_PullUp(Keypad_Port, Keypad_Row3);
    32f2:	82 e0       	ldi	r24, 0x02	; 2
    32f4:	63 e0       	ldi	r22, 0x03	; 3
    32f6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <DIO_PullUp>

}
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <KeypadGetKey>:
u8 KeypadGetKey() {
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	64 97       	sbiw	r28, 0x14	; 20
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
	u8 val = 0;
    3314:	1c 8a       	std	Y+20, r1	; 0x14
	for (int i = Keypad_Col0; i <= Keypad_Col3; i++) {
    3316:	84 e0       	ldi	r24, 0x04	; 4
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	9b 8b       	std	Y+19, r25	; 0x13
    331c:	8a 8b       	std	Y+18, r24	; 0x12
    331e:	b8 c0       	rjmp	.+368    	; 0x3490 <KeypadGetKey+0x190>
		//TogglePin(Keypad_Port, i);
		SetPinVal(Keypad_Port, i, PIN_LOW);
    3320:	9a 89       	ldd	r25, Y+18	; 0x12
    3322:	82 e0       	ldi	r24, 0x02	; 2
    3324:	69 2f       	mov	r22, r25
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>

		for (int j = Keypad_Row0; j <= Keypad_Row3; j++) {
    332c:	19 8a       	std	Y+17, r1	; 0x11
    332e:	18 8a       	std	Y+16, r1	; 0x10
    3330:	9e c0       	rjmp	.+316    	; 0x346e <KeypadGetKey+0x16e>
			u8 found = DIO_GetPinVal(Keypad_Port, j);
    3332:	98 89       	ldd	r25, Y+16	; 0x10
    3334:	82 e0       	ldi	r24, 0x02	; 2
    3336:	69 2f       	mov	r22, r25
    3338:	0e 94 a1 0c 	call	0x1942	; 0x1942 <DIO_GetPinVal>
    333c:	8f 87       	std	Y+15, r24	; 0x0f
			if (found == 0) {
    333e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3340:	88 23       	and	r24, r24
    3342:	09 f0       	breq	.+2      	; 0x3346 <KeypadGetKey+0x46>
    3344:	8f c0       	rjmp	.+286    	; 0x3464 <KeypadGetKey+0x164>
				val = Keys[j][i - Keypad_Col0];
    3346:	48 89       	ldd	r20, Y+16	; 0x10
    3348:	59 89       	ldd	r21, Y+17	; 0x11
    334a:	8a 89       	ldd	r24, Y+18	; 0x12
    334c:	9b 89       	ldd	r25, Y+19	; 0x13
    334e:	9c 01       	movw	r18, r24
    3350:	24 50       	subi	r18, 0x04	; 4
    3352:	30 40       	sbci	r19, 0x00	; 0
    3354:	ca 01       	movw	r24, r20
    3356:	88 0f       	add	r24, r24
    3358:	99 1f       	adc	r25, r25
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	82 0f       	add	r24, r18
    3360:	93 1f       	adc	r25, r19
    3362:	fc 01       	movw	r30, r24
    3364:	e8 59       	subi	r30, 0x98	; 152
    3366:	fe 4f       	sbci	r31, 0xFE	; 254
    3368:	80 81       	ld	r24, Z
    336a:	8c 8b       	std	Y+20, r24	; 0x14
    336c:	06 c0       	rjmp	.+12     	; 0x337a <KeypadGetKey+0x7a>
				while (found == 0) {
					found = DIO_GetPinVal(Keypad_Port, j);
    336e:	98 89       	ldd	r25, Y+16	; 0x10
    3370:	82 e0       	ldi	r24, 0x02	; 2
    3372:	69 2f       	mov	r22, r25
    3374:	0e 94 a1 0c 	call	0x1942	; 0x1942 <DIO_GetPinVal>
    3378:	8f 87       	std	Y+15, r24	; 0x0f

		for (int j = Keypad_Row0; j <= Keypad_Row3; j++) {
			u8 found = DIO_GetPinVal(Keypad_Port, j);
			if (found == 0) {
				val = Keys[j][i - Keypad_Col0];
				while (found == 0) {
    337a:	8f 85       	ldd	r24, Y+15	; 0x0f
    337c:	88 23       	and	r24, r24
    337e:	b9 f3       	breq	.-18     	; 0x336e <KeypadGetKey+0x6e>
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	a0 e2       	ldi	r26, 0x20	; 32
    3386:	b1 e4       	ldi	r27, 0x41	; 65
    3388:	8b 87       	std	Y+11, r24	; 0x0b
    338a:	9c 87       	std	Y+12, r25	; 0x0c
    338c:	ad 87       	std	Y+13, r26	; 0x0d
    338e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3390:	6b 85       	ldd	r22, Y+11	; 0x0b
    3392:	7c 85       	ldd	r23, Y+12	; 0x0c
    3394:	8d 85       	ldd	r24, Y+13	; 0x0d
    3396:	9e 85       	ldd	r25, Y+14	; 0x0e
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	4a ef       	ldi	r20, 0xFA	; 250
    339e:	54 e4       	ldi	r21, 0x44	; 68
    33a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	8f 83       	std	Y+7, r24	; 0x07
    33aa:	98 87       	std	Y+8, r25	; 0x08
    33ac:	a9 87       	std	Y+9, r26	; 0x09
    33ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b0:	6f 81       	ldd	r22, Y+7	; 0x07
    33b2:	78 85       	ldd	r23, Y+8	; 0x08
    33b4:	89 85       	ldd	r24, Y+9	; 0x09
    33b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e8       	ldi	r20, 0x80	; 128
    33be:	5f e3       	ldi	r21, 0x3F	; 63
    33c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33c4:	88 23       	and	r24, r24
    33c6:	2c f4       	brge	.+10     	; 0x33d2 <KeypadGetKey+0xd2>
		__ticks = 1;
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	9e 83       	std	Y+6, r25	; 0x06
    33ce:	8d 83       	std	Y+5, r24	; 0x05
    33d0:	3f c0       	rjmp	.+126    	; 0x3450 <KeypadGetKey+0x150>
	else if (__tmp > 65535)
    33d2:	6f 81       	ldd	r22, Y+7	; 0x07
    33d4:	78 85       	ldd	r23, Y+8	; 0x08
    33d6:	89 85       	ldd	r24, Y+9	; 0x09
    33d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	3f ef       	ldi	r19, 0xFF	; 255
    33de:	4f e7       	ldi	r20, 0x7F	; 127
    33e0:	57 e4       	ldi	r21, 0x47	; 71
    33e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33e6:	18 16       	cp	r1, r24
    33e8:	4c f5       	brge	.+82     	; 0x343c <KeypadGetKey+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	40 e2       	ldi	r20, 0x20	; 32
    33f8:	51 e4       	ldi	r21, 0x41	; 65
    33fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	bc 01       	movw	r22, r24
    3404:	cd 01       	movw	r24, r26
    3406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	9e 83       	std	Y+6, r25	; 0x06
    3410:	8d 83       	std	Y+5, r24	; 0x05
    3412:	0f c0       	rjmp	.+30     	; 0x3432 <KeypadGetKey+0x132>
    3414:	88 ec       	ldi	r24, 0xC8	; 200
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	9c 83       	std	Y+4, r25	; 0x04
    341a:	8b 83       	std	Y+3, r24	; 0x03
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	9c 81       	ldd	r25, Y+4	; 0x04
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	f1 f7       	brne	.-4      	; 0x3420 <KeypadGetKey+0x120>
    3424:	9c 83       	std	Y+4, r25	; 0x04
    3426:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3428:	8d 81       	ldd	r24, Y+5	; 0x05
    342a:	9e 81       	ldd	r25, Y+6	; 0x06
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	9e 83       	std	Y+6, r25	; 0x06
    3430:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3432:	8d 81       	ldd	r24, Y+5	; 0x05
    3434:	9e 81       	ldd	r25, Y+6	; 0x06
    3436:	00 97       	sbiw	r24, 0x00	; 0
    3438:	69 f7       	brne	.-38     	; 0x3414 <KeypadGetKey+0x114>
    343a:	14 c0       	rjmp	.+40     	; 0x3464 <KeypadGetKey+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    343c:	6f 81       	ldd	r22, Y+7	; 0x07
    343e:	78 85       	ldd	r23, Y+8	; 0x08
    3440:	89 85       	ldd	r24, Y+9	; 0x09
    3442:	9a 85       	ldd	r25, Y+10	; 0x0a
    3444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	9e 83       	std	Y+6, r25	; 0x06
    344e:	8d 83       	std	Y+5, r24	; 0x05
    3450:	8d 81       	ldd	r24, Y+5	; 0x05
    3452:	9e 81       	ldd	r25, Y+6	; 0x06
    3454:	9a 83       	std	Y+2, r25	; 0x02
    3456:	89 83       	std	Y+1, r24	; 0x01
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	9a 81       	ldd	r25, Y+2	; 0x02
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	f1 f7       	brne	.-4      	; 0x345c <KeypadGetKey+0x15c>
    3460:	9a 83       	std	Y+2, r25	; 0x02
    3462:	89 83       	std	Y+1, r24	; 0x01
	u8 val = 0;
	for (int i = Keypad_Col0; i <= Keypad_Col3; i++) {
		//TogglePin(Keypad_Port, i);
		SetPinVal(Keypad_Port, i, PIN_LOW);

		for (int j = Keypad_Row0; j <= Keypad_Row3; j++) {
    3464:	88 89       	ldd	r24, Y+16	; 0x10
    3466:	99 89       	ldd	r25, Y+17	; 0x11
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	99 8b       	std	Y+17, r25	; 0x11
    346c:	88 8b       	std	Y+16, r24	; 0x10
    346e:	88 89       	ldd	r24, Y+16	; 0x10
    3470:	99 89       	ldd	r25, Y+17	; 0x11
    3472:	84 30       	cpi	r24, 0x04	; 4
    3474:	91 05       	cpc	r25, r1
    3476:	0c f4       	brge	.+2      	; 0x347a <KeypadGetKey+0x17a>
    3478:	5c cf       	rjmp	.-328    	; 0x3332 <KeypadGetKey+0x32>

			}

		}

		SetPinVal(Keypad_Port, i, PIN_HIGH);
    347a:	9a 89       	ldd	r25, Y+18	; 0x12
    347c:	82 e0       	ldi	r24, 0x02	; 2
    347e:	69 2f       	mov	r22, r25
    3480:	41 e0       	ldi	r20, 0x01	; 1
    3482:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	DIO_PullUp(Keypad_Port, Keypad_Row3);

}
u8 KeypadGetKey() {
	u8 val = 0;
	for (int i = Keypad_Col0; i <= Keypad_Col3; i++) {
    3486:	8a 89       	ldd	r24, Y+18	; 0x12
    3488:	9b 89       	ldd	r25, Y+19	; 0x13
    348a:	01 96       	adiw	r24, 0x01	; 1
    348c:	9b 8b       	std	Y+19, r25	; 0x13
    348e:	8a 8b       	std	Y+18, r24	; 0x12
    3490:	8a 89       	ldd	r24, Y+18	; 0x12
    3492:	9b 89       	ldd	r25, Y+19	; 0x13
    3494:	88 30       	cpi	r24, 0x08	; 8
    3496:	91 05       	cpc	r25, r1
    3498:	0c f4       	brge	.+2      	; 0x349c <KeypadGetKey+0x19c>
    349a:	42 cf       	rjmp	.-380    	; 0x3320 <KeypadGetKey+0x20>
		}

		SetPinVal(Keypad_Port, i, PIN_HIGH);

	}
	return val;
    349c:	8c 89       	ldd	r24, Y+20	; 0x14

}
    349e:	64 96       	adiw	r28, 0x14	; 20
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	f8 94       	cli
    34a4:	de bf       	out	0x3e, r29	; 62
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	cd bf       	out	0x3d, r28	; 61
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	08 95       	ret

000034b0 <main>:
#include "MCAL/ADC/int.h"
#include "MCAL/Timer/int.h"
#include "MCAL/SPI/int.h"
extern u32 overflowNum, initialVal;

void main(void) {
    34b0:	df 93       	push	r29
    34b2:	cf 93       	push	r28
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
    34b8:	68 97       	sbiw	r28, 0x18	; 24
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61

	//initTimer1();
	//Timer1_wait_ms(500);
	//Timer1_Start();
//init_SPI_Slave();
	SetPinDir(DIO_PORTC, PIN_0, PIN_OUT);
    34c4:	82 e0       	ldi	r24, 0x02	; 2
    34c6:	60 e0       	ldi	r22, 0x00	; 0
    34c8:	41 e0       	ldi	r20, 0x01	; 1
    34ca:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(DIO_PORTC, PIN_1, PIN_OUT);
    34ce:	82 e0       	ldi	r24, 0x02	; 2
    34d0:	61 e0       	ldi	r22, 0x01	; 1
    34d2:	41 e0       	ldi	r20, 0x01	; 1
    34d4:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(DIO_PORTC, PIN_2, PIN_OUT);
    34d8:	82 e0       	ldi	r24, 0x02	; 2
    34da:	62 e0       	ldi	r22, 0x02	; 2
    34dc:	41 e0       	ldi	r20, 0x01	; 1
    34de:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>
	SetPinDir(DIO_PORTC, PIN_6, PIN_OUT);
    34e2:	82 e0       	ldi	r24, 0x02	; 2
    34e4:	66 e0       	ldi	r22, 0x06	; 6
    34e6:	41 e0       	ldi	r20, 0x01	; 1
    34e8:	0e 94 14 0a 	call	0x1428	; 0x1428 <SetPinDir>

	SetPinVal(DIO_PORTC, PIN_0, PIN_HIGH);
    34ec:	82 e0       	ldi	r24, 0x02	; 2
    34ee:	60 e0       	ldi	r22, 0x00	; 0
    34f0:	41 e0       	ldi	r20, 0x01	; 1
    34f2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	SetPinVal(DIO_PORTC, PIN_1, PIN_HIGH);
    34f6:	82 e0       	ldi	r24, 0x02	; 2
    34f8:	61 e0       	ldi	r22, 0x01	; 1
    34fa:	41 e0       	ldi	r20, 0x01	; 1
    34fc:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	SetPinVal(DIO_PORTC, PIN_2, PIN_HIGH);
    3500:	82 e0       	ldi	r24, 0x02	; 2
    3502:	62 e0       	ldi	r22, 0x02	; 2
    3504:	41 e0       	ldi	r20, 0x01	; 1
    3506:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
	SetPinVal(DIO_PORTC, PIN_6, PIN_HIGH);
    350a:	82 e0       	ldi	r24, 0x02	; 2
    350c:	66 e0       	ldi	r22, 0x06	; 6
    350e:	41 e0       	ldi	r20, 0x01	; 1
    3510:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	a6 e9       	ldi	r26, 0x96	; 150
    351a:	b3 e4       	ldi	r27, 0x43	; 67
    351c:	8d 8b       	std	Y+21, r24	; 0x15
    351e:	9e 8b       	std	Y+22, r25	; 0x16
    3520:	af 8b       	std	Y+23, r26	; 0x17
    3522:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3524:	6d 89       	ldd	r22, Y+21	; 0x15
    3526:	7e 89       	ldd	r23, Y+22	; 0x16
    3528:	8f 89       	ldd	r24, Y+23	; 0x17
    352a:	98 8d       	ldd	r25, Y+24	; 0x18
    352c:	2b ea       	ldi	r18, 0xAB	; 171
    352e:	3a ea       	ldi	r19, 0xAA	; 170
    3530:	4a e2       	ldi	r20, 0x2A	; 42
    3532:	50 e4       	ldi	r21, 0x40	; 64
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	89 8b       	std	Y+17, r24	; 0x11
    353e:	9a 8b       	std	Y+18, r25	; 0x12
    3540:	ab 8b       	std	Y+19, r26	; 0x13
    3542:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3544:	69 89       	ldd	r22, Y+17	; 0x11
    3546:	7a 89       	ldd	r23, Y+18	; 0x12
    3548:	8b 89       	ldd	r24, Y+19	; 0x13
    354a:	9c 89       	ldd	r25, Y+20	; 0x14
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e8       	ldi	r20, 0x80	; 128
    3552:	5f e3       	ldi	r21, 0x3F	; 63
    3554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3558:	88 23       	and	r24, r24
    355a:	1c f4       	brge	.+6      	; 0x3562 <main+0xb2>
		__ticks = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	88 8b       	std	Y+16, r24	; 0x10
    3560:	91 c0       	rjmp	.+290    	; 0x3684 <main+0x1d4>
	else if (__tmp > 255)
    3562:	69 89       	ldd	r22, Y+17	; 0x11
    3564:	7a 89       	ldd	r23, Y+18	; 0x12
    3566:	8b 89       	ldd	r24, Y+19	; 0x13
    3568:	9c 89       	ldd	r25, Y+20	; 0x14
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	4f e7       	ldi	r20, 0x7F	; 127
    3570:	53 e4       	ldi	r21, 0x43	; 67
    3572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3576:	18 16       	cp	r1, r24
    3578:	0c f0       	brlt	.+2      	; 0x357c <main+0xcc>
    357a:	7b c0       	rjmp	.+246    	; 0x3672 <main+0x1c2>
	{
		_delay_ms(__us / 1000.0);
    357c:	6d 89       	ldd	r22, Y+21	; 0x15
    357e:	7e 89       	ldd	r23, Y+22	; 0x16
    3580:	8f 89       	ldd	r24, Y+23	; 0x17
    3582:	98 8d       	ldd	r25, Y+24	; 0x18
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	4a e7       	ldi	r20, 0x7A	; 122
    358a:	54 e4       	ldi	r21, 0x44	; 68
    358c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	8c 87       	std	Y+12, r24	; 0x0c
    3596:	9d 87       	std	Y+13, r25	; 0x0d
    3598:	ae 87       	std	Y+14, r26	; 0x0e
    359a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359c:	6c 85       	ldd	r22, Y+12	; 0x0c
    359e:	7d 85       	ldd	r23, Y+13	; 0x0d
    35a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    35a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	4a ef       	ldi	r20, 0xFA	; 250
    35aa:	54 e4       	ldi	r21, 0x44	; 68
    35ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	88 87       	std	Y+8, r24	; 0x08
    35b6:	99 87       	std	Y+9, r25	; 0x09
    35b8:	aa 87       	std	Y+10, r26	; 0x0a
    35ba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    35bc:	68 85       	ldd	r22, Y+8	; 0x08
    35be:	79 85       	ldd	r23, Y+9	; 0x09
    35c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    35c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e8       	ldi	r20, 0x80	; 128
    35ca:	5f e3       	ldi	r21, 0x3F	; 63
    35cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35d0:	88 23       	and	r24, r24
    35d2:	2c f4       	brge	.+10     	; 0x35de <main+0x12e>
		__ticks = 1;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	9f 83       	std	Y+7, r25	; 0x07
    35da:	8e 83       	std	Y+6, r24	; 0x06
    35dc:	3f c0       	rjmp	.+126    	; 0x365c <main+0x1ac>
	else if (__tmp > 65535)
    35de:	68 85       	ldd	r22, Y+8	; 0x08
    35e0:	79 85       	ldd	r23, Y+9	; 0x09
    35e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    35e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	3f ef       	ldi	r19, 0xFF	; 255
    35ea:	4f e7       	ldi	r20, 0x7F	; 127
    35ec:	57 e4       	ldi	r21, 0x47	; 71
    35ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35f2:	18 16       	cp	r1, r24
    35f4:	4c f5       	brge	.+82     	; 0x3648 <main+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    35f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    35fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    35fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e2       	ldi	r20, 0x20	; 32
    3604:	51 e4       	ldi	r21, 0x41	; 65
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	bc 01       	movw	r22, r24
    3610:	cd 01       	movw	r24, r26
    3612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	9f 83       	std	Y+7, r25	; 0x07
    361c:	8e 83       	std	Y+6, r24	; 0x06
    361e:	0f c0       	rjmp	.+30     	; 0x363e <main+0x18e>
    3620:	88 ec       	ldi	r24, 0xC8	; 200
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	9d 83       	std	Y+5, r25	; 0x05
    3626:	8c 83       	std	Y+4, r24	; 0x04
    3628:	8c 81       	ldd	r24, Y+4	; 0x04
    362a:	9d 81       	ldd	r25, Y+5	; 0x05
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <main+0x17c>
    3630:	9d 83       	std	Y+5, r25	; 0x05
    3632:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3634:	8e 81       	ldd	r24, Y+6	; 0x06
    3636:	9f 81       	ldd	r25, Y+7	; 0x07
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	9f 83       	std	Y+7, r25	; 0x07
    363c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363e:	8e 81       	ldd	r24, Y+6	; 0x06
    3640:	9f 81       	ldd	r25, Y+7	; 0x07
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	69 f7       	brne	.-38     	; 0x3620 <main+0x170>
    3646:	24 c0       	rjmp	.+72     	; 0x3690 <main+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3648:	68 85       	ldd	r22, Y+8	; 0x08
    364a:	79 85       	ldd	r23, Y+9	; 0x09
    364c:	8a 85       	ldd	r24, Y+10	; 0x0a
    364e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	9f 83       	std	Y+7, r25	; 0x07
    365a:	8e 83       	std	Y+6, r24	; 0x06
    365c:	8e 81       	ldd	r24, Y+6	; 0x06
    365e:	9f 81       	ldd	r25, Y+7	; 0x07
    3660:	9b 83       	std	Y+3, r25	; 0x03
    3662:	8a 83       	std	Y+2, r24	; 0x02
    3664:	8a 81       	ldd	r24, Y+2	; 0x02
    3666:	9b 81       	ldd	r25, Y+3	; 0x03
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <main+0x1b8>
    366c:	9b 83       	std	Y+3, r25	; 0x03
    366e:	8a 83       	std	Y+2, r24	; 0x02
    3670:	0f c0       	rjmp	.+30     	; 0x3690 <main+0x1e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3672:	69 89       	ldd	r22, Y+17	; 0x11
    3674:	7a 89       	ldd	r23, Y+18	; 0x12
    3676:	8b 89       	ldd	r24, Y+19	; 0x13
    3678:	9c 89       	ldd	r25, Y+20	; 0x14
    367a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	88 8b       	std	Y+16, r24	; 0x10
    3684:	88 89       	ldd	r24, Y+16	; 0x10
    3686:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	8a 95       	dec	r24
    368c:	f1 f7       	brne	.-4      	; 0x368a <main+0x1da>
    368e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(300);
	SetPinVal(DIO_PORTC, PIN_6, PIN_LOW);
    3690:	82 e0       	ldi	r24, 0x02	; 2
    3692:	66 e0       	ldi	r22, 0x06	; 6
    3694:	40 e0       	ldi	r20, 0x00	; 0
    3696:	0e 94 1c 0b 	call	0x1638	; 0x1638 <SetPinVal>
    369a:	ff cf       	rjmp	.-2      	; 0x369a <main+0x1ea>

0000369c <__vector_1>:

	}

}

ISR( INT0_vect) {
    369c:	1f 92       	push	r1
    369e:	0f 92       	push	r0
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	0f 92       	push	r0
    36a4:	11 24       	eor	r1, r1
    36a6:	2f 93       	push	r18
    36a8:	3f 93       	push	r19
    36aa:	4f 93       	push	r20
    36ac:	5f 93       	push	r21
    36ae:	6f 93       	push	r22
    36b0:	7f 93       	push	r23
    36b2:	8f 93       	push	r24
    36b4:	9f 93       	push	r25
    36b6:	af 93       	push	r26
    36b8:	bf 93       	push	r27
    36ba:	ef 93       	push	r30
    36bc:	ff 93       	push	r31
    36be:	df 93       	push	r29
    36c0:	cf 93       	push	r28
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
	TogglePin(DIO_PORTA, PIN_0);
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	60 e0       	ldi	r22, 0x00	; 0
    36ca:	0e 94 24 0c 	call	0x1848	; 0x1848 <TogglePin>
}
    36ce:	cf 91       	pop	r28
    36d0:	df 91       	pop	r29
    36d2:	ff 91       	pop	r31
    36d4:	ef 91       	pop	r30
    36d6:	bf 91       	pop	r27
    36d8:	af 91       	pop	r26
    36da:	9f 91       	pop	r25
    36dc:	8f 91       	pop	r24
    36de:	7f 91       	pop	r23
    36e0:	6f 91       	pop	r22
    36e2:	5f 91       	pop	r21
    36e4:	4f 91       	pop	r20
    36e6:	3f 91       	pop	r19
    36e8:	2f 91       	pop	r18
    36ea:	0f 90       	pop	r0
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	0f 90       	pop	r0
    36f0:	1f 90       	pop	r1
    36f2:	18 95       	reti

000036f4 <__vector_11>:

ISR( TIMER0_OVF_vect) {
    36f4:	1f 92       	push	r1
    36f6:	0f 92       	push	r0
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	0f 92       	push	r0
    36fc:	11 24       	eor	r1, r1
    36fe:	2f 93       	push	r18
    3700:	3f 93       	push	r19
    3702:	4f 93       	push	r20
    3704:	5f 93       	push	r21
    3706:	6f 93       	push	r22
    3708:	7f 93       	push	r23
    370a:	8f 93       	push	r24
    370c:	9f 93       	push	r25
    370e:	af 93       	push	r26
    3710:	bf 93       	push	r27
    3712:	ef 93       	push	r30
    3714:	ff 93       	push	r31
    3716:	df 93       	push	r29
    3718:	cf 93       	push	r28
    371a:	cd b7       	in	r28, 0x3d	; 61
    371c:	de b7       	in	r29, 0x3e	; 62
	static u32 counter = 0;
	counter++;
    371e:	80 91 80 01 	lds	r24, 0x0180
    3722:	90 91 81 01 	lds	r25, 0x0181
    3726:	a0 91 82 01 	lds	r26, 0x0182
    372a:	b0 91 83 01 	lds	r27, 0x0183
    372e:	01 96       	adiw	r24, 0x01	; 1
    3730:	a1 1d       	adc	r26, r1
    3732:	b1 1d       	adc	r27, r1
    3734:	80 93 80 01 	sts	0x0180, r24
    3738:	90 93 81 01 	sts	0x0181, r25
    373c:	a0 93 82 01 	sts	0x0182, r26
    3740:	b0 93 83 01 	sts	0x0183, r27
	if (counter == overflowNum) {
    3744:	20 91 80 01 	lds	r18, 0x0180
    3748:	30 91 81 01 	lds	r19, 0x0181
    374c:	40 91 82 01 	lds	r20, 0x0182
    3750:	50 91 83 01 	lds	r21, 0x0183
    3754:	80 91 78 01 	lds	r24, 0x0178
    3758:	90 91 79 01 	lds	r25, 0x0179
    375c:	a0 91 7a 01 	lds	r26, 0x017A
    3760:	b0 91 7b 01 	lds	r27, 0x017B
    3764:	28 17       	cp	r18, r24
    3766:	39 07       	cpc	r19, r25
    3768:	4a 07       	cpc	r20, r26
    376a:	5b 07       	cpc	r21, r27
    376c:	b9 f4       	brne	.+46     	; 0x379c <__vector_11+0xa8>
		TogglePin(DIO_PORTA, 0);
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	0e 94 24 0c 	call	0x1848	; 0x1848 <TogglePin>
		counter = 0;
    3776:	10 92 80 01 	sts	0x0180, r1
    377a:	10 92 81 01 	sts	0x0181, r1
    377e:	10 92 82 01 	sts	0x0182, r1
    3782:	10 92 83 01 	sts	0x0183, r1
		TCNT0 = initialVal;
    3786:	e2 e5       	ldi	r30, 0x52	; 82
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	80 91 7c 01 	lds	r24, 0x017C
    378e:	90 91 7d 01 	lds	r25, 0x017D
    3792:	a0 91 7e 01 	lds	r26, 0x017E
    3796:	b0 91 7f 01 	lds	r27, 0x017F
    379a:	80 83       	st	Z, r24

	}

}
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	ff 91       	pop	r31
    37a2:	ef 91       	pop	r30
    37a4:	bf 91       	pop	r27
    37a6:	af 91       	pop	r26
    37a8:	9f 91       	pop	r25
    37aa:	8f 91       	pop	r24
    37ac:	7f 91       	pop	r23
    37ae:	6f 91       	pop	r22
    37b0:	5f 91       	pop	r21
    37b2:	4f 91       	pop	r20
    37b4:	3f 91       	pop	r19
    37b6:	2f 91       	pop	r18
    37b8:	0f 90       	pop	r0
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	0f 90       	pop	r0
    37be:	1f 90       	pop	r1
    37c0:	18 95       	reti

000037c2 <__vector_7>:
ISR( TIMER1_COMPA_vect) {
    37c2:	1f 92       	push	r1
    37c4:	0f 92       	push	r0
    37c6:	0f b6       	in	r0, 0x3f	; 63
    37c8:	0f 92       	push	r0
    37ca:	11 24       	eor	r1, r1
    37cc:	2f 93       	push	r18
    37ce:	3f 93       	push	r19
    37d0:	4f 93       	push	r20
    37d2:	5f 93       	push	r21
    37d4:	6f 93       	push	r22
    37d6:	7f 93       	push	r23
    37d8:	8f 93       	push	r24
    37da:	9f 93       	push	r25
    37dc:	af 93       	push	r26
    37de:	bf 93       	push	r27
    37e0:	ef 93       	push	r30
    37e2:	ff 93       	push	r31
    37e4:	df 93       	push	r29
    37e6:	cf 93       	push	r28
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
	TogglePin(DIO_PORTB, PIN_2);
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	62 e0       	ldi	r22, 0x02	; 2
    37f0:	0e 94 24 0c 	call	0x1848	; 0x1848 <TogglePin>
}
    37f4:	cf 91       	pop	r28
    37f6:	df 91       	pop	r29
    37f8:	ff 91       	pop	r31
    37fa:	ef 91       	pop	r30
    37fc:	bf 91       	pop	r27
    37fe:	af 91       	pop	r26
    3800:	9f 91       	pop	r25
    3802:	8f 91       	pop	r24
    3804:	7f 91       	pop	r23
    3806:	6f 91       	pop	r22
    3808:	5f 91       	pop	r21
    380a:	4f 91       	pop	r20
    380c:	3f 91       	pop	r19
    380e:	2f 91       	pop	r18
    3810:	0f 90       	pop	r0
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	0f 90       	pop	r0
    3816:	1f 90       	pop	r1
    3818:	18 95       	reti

0000381a <__mulsi3>:
    381a:	62 9f       	mul	r22, r18
    381c:	d0 01       	movw	r26, r0
    381e:	73 9f       	mul	r23, r19
    3820:	f0 01       	movw	r30, r0
    3822:	82 9f       	mul	r24, r18
    3824:	e0 0d       	add	r30, r0
    3826:	f1 1d       	adc	r31, r1
    3828:	64 9f       	mul	r22, r20
    382a:	e0 0d       	add	r30, r0
    382c:	f1 1d       	adc	r31, r1
    382e:	92 9f       	mul	r25, r18
    3830:	f0 0d       	add	r31, r0
    3832:	83 9f       	mul	r24, r19
    3834:	f0 0d       	add	r31, r0
    3836:	74 9f       	mul	r23, r20
    3838:	f0 0d       	add	r31, r0
    383a:	65 9f       	mul	r22, r21
    383c:	f0 0d       	add	r31, r0
    383e:	99 27       	eor	r25, r25
    3840:	72 9f       	mul	r23, r18
    3842:	b0 0d       	add	r27, r0
    3844:	e1 1d       	adc	r30, r1
    3846:	f9 1f       	adc	r31, r25
    3848:	63 9f       	mul	r22, r19
    384a:	b0 0d       	add	r27, r0
    384c:	e1 1d       	adc	r30, r1
    384e:	f9 1f       	adc	r31, r25
    3850:	bd 01       	movw	r22, r26
    3852:	cf 01       	movw	r24, r30
    3854:	11 24       	eor	r1, r1
    3856:	08 95       	ret

00003858 <__udivmodqi4>:
    3858:	99 1b       	sub	r25, r25
    385a:	79 e0       	ldi	r23, 0x09	; 9
    385c:	04 c0       	rjmp	.+8      	; 0x3866 <__udivmodqi4_ep>

0000385e <__udivmodqi4_loop>:
    385e:	99 1f       	adc	r25, r25
    3860:	96 17       	cp	r25, r22
    3862:	08 f0       	brcs	.+2      	; 0x3866 <__udivmodqi4_ep>
    3864:	96 1b       	sub	r25, r22

00003866 <__udivmodqi4_ep>:
    3866:	88 1f       	adc	r24, r24
    3868:	7a 95       	dec	r23
    386a:	c9 f7       	brne	.-14     	; 0x385e <__udivmodqi4_loop>
    386c:	80 95       	com	r24
    386e:	08 95       	ret

00003870 <__udivmodhi4>:
    3870:	aa 1b       	sub	r26, r26
    3872:	bb 1b       	sub	r27, r27
    3874:	51 e1       	ldi	r21, 0x11	; 17
    3876:	07 c0       	rjmp	.+14     	; 0x3886 <__udivmodhi4_ep>

00003878 <__udivmodhi4_loop>:
    3878:	aa 1f       	adc	r26, r26
    387a:	bb 1f       	adc	r27, r27
    387c:	a6 17       	cp	r26, r22
    387e:	b7 07       	cpc	r27, r23
    3880:	10 f0       	brcs	.+4      	; 0x3886 <__udivmodhi4_ep>
    3882:	a6 1b       	sub	r26, r22
    3884:	b7 0b       	sbc	r27, r23

00003886 <__udivmodhi4_ep>:
    3886:	88 1f       	adc	r24, r24
    3888:	99 1f       	adc	r25, r25
    388a:	5a 95       	dec	r21
    388c:	a9 f7       	brne	.-22     	; 0x3878 <__udivmodhi4_loop>
    388e:	80 95       	com	r24
    3890:	90 95       	com	r25
    3892:	bc 01       	movw	r22, r24
    3894:	cd 01       	movw	r24, r26
    3896:	08 95       	ret

00003898 <__udivmodsi4>:
    3898:	a1 e2       	ldi	r26, 0x21	; 33
    389a:	1a 2e       	mov	r1, r26
    389c:	aa 1b       	sub	r26, r26
    389e:	bb 1b       	sub	r27, r27
    38a0:	fd 01       	movw	r30, r26
    38a2:	0d c0       	rjmp	.+26     	; 0x38be <__udivmodsi4_ep>

000038a4 <__udivmodsi4_loop>:
    38a4:	aa 1f       	adc	r26, r26
    38a6:	bb 1f       	adc	r27, r27
    38a8:	ee 1f       	adc	r30, r30
    38aa:	ff 1f       	adc	r31, r31
    38ac:	a2 17       	cp	r26, r18
    38ae:	b3 07       	cpc	r27, r19
    38b0:	e4 07       	cpc	r30, r20
    38b2:	f5 07       	cpc	r31, r21
    38b4:	20 f0       	brcs	.+8      	; 0x38be <__udivmodsi4_ep>
    38b6:	a2 1b       	sub	r26, r18
    38b8:	b3 0b       	sbc	r27, r19
    38ba:	e4 0b       	sbc	r30, r20
    38bc:	f5 0b       	sbc	r31, r21

000038be <__udivmodsi4_ep>:
    38be:	66 1f       	adc	r22, r22
    38c0:	77 1f       	adc	r23, r23
    38c2:	88 1f       	adc	r24, r24
    38c4:	99 1f       	adc	r25, r25
    38c6:	1a 94       	dec	r1
    38c8:	69 f7       	brne	.-38     	; 0x38a4 <__udivmodsi4_loop>
    38ca:	60 95       	com	r22
    38cc:	70 95       	com	r23
    38ce:	80 95       	com	r24
    38d0:	90 95       	com	r25
    38d2:	9b 01       	movw	r18, r22
    38d4:	ac 01       	movw	r20, r24
    38d6:	bd 01       	movw	r22, r26
    38d8:	cf 01       	movw	r24, r30
    38da:	08 95       	ret

000038dc <__prologue_saves__>:
    38dc:	2f 92       	push	r2
    38de:	3f 92       	push	r3
    38e0:	4f 92       	push	r4
    38e2:	5f 92       	push	r5
    38e4:	6f 92       	push	r6
    38e6:	7f 92       	push	r7
    38e8:	8f 92       	push	r8
    38ea:	9f 92       	push	r9
    38ec:	af 92       	push	r10
    38ee:	bf 92       	push	r11
    38f0:	cf 92       	push	r12
    38f2:	df 92       	push	r13
    38f4:	ef 92       	push	r14
    38f6:	ff 92       	push	r15
    38f8:	0f 93       	push	r16
    38fa:	1f 93       	push	r17
    38fc:	cf 93       	push	r28
    38fe:	df 93       	push	r29
    3900:	cd b7       	in	r28, 0x3d	; 61
    3902:	de b7       	in	r29, 0x3e	; 62
    3904:	ca 1b       	sub	r28, r26
    3906:	db 0b       	sbc	r29, r27
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	09 94       	ijmp

00003914 <__epilogue_restores__>:
    3914:	2a 88       	ldd	r2, Y+18	; 0x12
    3916:	39 88       	ldd	r3, Y+17	; 0x11
    3918:	48 88       	ldd	r4, Y+16	; 0x10
    391a:	5f 84       	ldd	r5, Y+15	; 0x0f
    391c:	6e 84       	ldd	r6, Y+14	; 0x0e
    391e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3920:	8c 84       	ldd	r8, Y+12	; 0x0c
    3922:	9b 84       	ldd	r9, Y+11	; 0x0b
    3924:	aa 84       	ldd	r10, Y+10	; 0x0a
    3926:	b9 84       	ldd	r11, Y+9	; 0x09
    3928:	c8 84       	ldd	r12, Y+8	; 0x08
    392a:	df 80       	ldd	r13, Y+7	; 0x07
    392c:	ee 80       	ldd	r14, Y+6	; 0x06
    392e:	fd 80       	ldd	r15, Y+5	; 0x05
    3930:	0c 81       	ldd	r16, Y+4	; 0x04
    3932:	1b 81       	ldd	r17, Y+3	; 0x03
    3934:	aa 81       	ldd	r26, Y+2	; 0x02
    3936:	b9 81       	ldd	r27, Y+1	; 0x01
    3938:	ce 0f       	add	r28, r30
    393a:	d1 1d       	adc	r29, r1
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	cd bf       	out	0x3d, r28	; 61
    3946:	ed 01       	movw	r28, r26
    3948:	08 95       	ret

0000394a <_exit>:
    394a:	f8 94       	cli

0000394c <__stop_program>:
    394c:	ff cf       	rjmp	.-2      	; 0x394c <__stop_program>
